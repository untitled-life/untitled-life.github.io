<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hackx's Blog]]></title>
  <link href="http://untitled-life.github.io/atom.xml" rel="self"/>
  <link href="http://untitled-life.github.io/"/>
  <updated>2019-03-09T16:30:48+08:00</updated>
  <id>http://untitled-life.github.io/</id>
  <author>
    <name><![CDATA[Mike Cao]]></name>
    <email><![CDATA[untitled2018life@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[4 Characteristics of Timers in Apache Flink to Keep in Mind]]></title>
    <link href="http://untitled-life.github.io/blog/2019/03/09/4-characteristics-of-timers-in-apache-flink-to-keep-in-mind/"/>
    <updated>2019-03-09T16:23:32+08:00</updated>
    <id>http://untitled-life.github.io/blog/2019/03/09/4-characteristics-of-timers-in-apache-flink-to-keep-in-mind</id>
    <content type="html"><![CDATA[<blockquote><p>虽然心中有爱，但是爱，冻结在经年累月的沉默里，好像藏着一个疼痛的伤口，没有纱布可绑。 &ndash;龙应台 《亲爱的安德烈》</p></blockquote>

<!-- more -->


<p>原文地址：<a href="https://www.da-platform.com/blog/4-characteristics-of-timers-in-apache-flink">https://www.da-platform.com/blog/4-characteristics-of-timers-in-apache-flink</a></p>

<p>本文描述了在Apache Flink中使用计时器的一些基本概念和注意事项。开发人员可以使用Flink的ProcessFunction操作符注册自己的计时器，以便可以访问流应用程序的一些基本构建块，例如：</p>

<ul>
<li>事件(流元素)</li>
<li>状态(容错、一致、仅在键控流上)</li>
<li>计时器(事件时间和处理时间，仅在键控流上)</li>
</ul>


<p>有关Apache Flink ProcessFunction的更多信息，我们建议阅读<a href="https://ci.apache.org/projects/flink/flink-docs-stable/dev/stream/operators/process_function.html">Apache Flink 1.7文档</a>以获得更多的说明和指导。</p>

<h1>Apache Flink中的计时器是什么?</h1>

<p>计时器使Flink流应用程序具有响应性，并可以对处理和事件时间的更改做出适配。我们之前的<a href="https://www.da-platform.com/blog/stream-processing-introduction-event-time-apache-flink">一篇文章</a>更详细地介绍了Apache Flink中时间的其他概念以及处理、摄入和事件时间之间的差异。当使用计时器处理事件流时，每当调用<strong>processElement(…)</strong>时，都会传递一个上下文对象，允许您访问元素的事件时间戳和TimerService。然后可以使用TimerService为将来的事件/处理时间瞬间注册回调。通过这样做，一旦到达计时器的特定时间瞬间，<strong>onTimer(…)</strong>方法将被调用。</p>

<p><strong>onTimer(…)</strong>回调被调用的时间点首先取决于是使用处理时间还是事件时间来注册计时器。特别是:</p>

<ul>
<li>当使用处理时间在Flink应用程序中注册计时器时，当机器的时钟时间达到计时器的时间戳时，将调用onTimer(…)方法。</li>
<li>当使用事件时间在Flink应用程序中注册计时器时，当操作符的水印达到或超过计时器的时间戳时，将调用onTimer(…)方法。</li>
</ul>


<p>与<strong>processElement(…)</strong>方法类似，<strong>onTimer(…)</strong>回调中的状态访问也限定在当前键(其注册计时器的键)。</p>

<p>这里值得注意的是，onTimer(…)和processElement(…)的调用都是同步的，因此在<strong>onTimer(…)</strong>和<strong>processElement(…)</strong>方法中对状态的访问和修改是安全的。</p>

<h1>牢记定时器的4个特点</h1>

<p>在这一段中，我们将讨论Apache Flink中计时器的4个基本特性，在使用它们之前应该记住这些特性。这些是:</p>

<h2>1. 定时器在KeyedStream上注册</h2>

<p>由于计时器是按每个键注册和触发的，所以KeyedStream是Apache Flink中使用计时器的任何操作和函数的先决条件。</p>

<h2>2.计时器会自动删除重复数据</h2>

<p>TimerService会自动删除计时器的重复项，每个键和时间戳最多只能有一个计时器。这意味着，当多个计时器为同一个键或时间戳注册时，onTimer()方法将只调用一次。</p>

<h2>3.定时器具有检查点特性</h2>

<p>计时器由Flink进行检查点，就像任何其他托管状态一样。当Flink从检查点或保存点恢复作业时，每一个注册的计时器应该在恢复操作触发之前被启动。</p>

<h2>4. 计时器可以被删除</h2>

<p>从Flink 1.6开始，计时器可以暂停和删除。如果您使用的Apache Flink版本比Flink 1.5老，那么您可能会遇到一个糟糕的检查点性能，因为有许多计时器无法删除或停止。</p>

<p>您可以使用以下命令停止处理时间定时器:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">long</span> <span class="n">timestampOfTimerToStop</span> <span class="k">=</span> <span class="o">...</span>
</span><span class='line'><span class="n">ctx</span><span class="o">.</span><span class="n">timerService</span><span class="o">(</span> <span class="o">).</span><span class="n">deleteProcessingTimeTimer</span><span class="o">(</span><span class="n">timestampOfTimerToStop</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>您还可以通过以下命令停止事件时间计时器:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">long</span> <span class="n">timestampOfTimerToStop</span> <span class="k">=</span> <span class="o">...</span>
</span><span class='line'><span class="n">ctx</span><span class="o">.</span><span class="n">timerService</span><span class="o">(</span> <span class="o">).</span><span class="n">deleteEventTimeTimer</span><span class="o">(</span><span class="n">timestampOfTimerToStop</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://untitled-life.github.io/images/post/FFT-Timers-in-flink.png" alt="Timers-in-flink" /></p>

<p>这里值得一提的是，如果没有注册具有给定时间戳的计时器，则停止计时器没有效果。</p>

<p class='post-footer'>
            显示信息
            <a href='http://untitled-life.github.io/blog/2019/03/09/4-characteristics-of-timers-in-apache-flink-to-keep-in-mind/'>http://untitled-life.github.io/blog/2019/03/09/4-characteristics-of-timers-in-apache-flink-to-keep-in-mind/</a><br/>
            written by <a href='http://untitled-life.github.io'>Mike Cao</a>
            &nbsp;posted at <a href='http://untitled-life.github.io'>http://untitled-life.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4 Steps to Get Your Flink Application Ready for Production]]></title>
    <link href="http://untitled-life.github.io/blog/2019/03/09/4-steps-to-get-your-flink-application-ready-for-production/"/>
    <updated>2019-03-09T16:12:19+08:00</updated>
    <id>http://untitled-life.github.io/blog/2019/03/09/4-steps-to-get-your-flink-application-ready-for-production</id>
    <content type="html"><![CDATA[<blockquote><p>独裁，专制，腐败，不是哪一个主义制度所独有，但是东欧革命狂潮就应该给所有的专制政权，不管它是否什么主义，一个冰冷的警告，暴力，不能持久。 &ndash;龙应台 《百年思索》</p></blockquote>

<!-- more -->


<p>原文地址：<a href="https://www.da-platform.com/blog/4-steps-flink-application-production-ready">https://www.da-platform.com/blog/4-steps-flink-application-production-ready</a></p>

<p>本文将描述使Flink应用程序投入生产的必要配置步骤。在下面的部分中，我们概述了重要的配置参数，而这些参数是工程领导、DevOps和数据工程师将Flink作业引入生产阶段之前需要仔细考虑的。Apache Flink为大多数配置选项提供了开箱即用的默认设置，在许多情况下，这是POC阶段(概念验证)或探索不同api和Flink抽象的良好起点。</p>

<p>然而，将Flink应用程序引入生产环境需要额外的配置，这些配置能够有效地扩展和再次扩展您的应用程序，并使其可用于生产，并与不同的系统需求、Flink版本和连接器兼容，以用于未来的迭代和潜在的升级。</p>

<p>下面，我们将收集一些配置要点，以便在将Flink应用程序投入生产之前进行审查:
<img src="http://untitled-life.github.io/images/post/FFT-4-steps-to-get-your-app-production-ready.png" alt="FFT-4-steps-to-get-your-app-production-ready.png" /></p>

<h2>1. 明确定义Flink运算符的最大并行度</h2>

<p>Flink的键控状态被组织在所谓的键组中，然后这些键组被分发到您的Flink操作符的并行实例中。这是要分发的最小原子单元，因此也会影响Flink应用程序的可伸缩性。每个操作符的键组数对于每个作业只选择一次:手动或默认情况下。默认值将给出大致的操作并行度* 1.5，下界为128，上界为32768。它可以通过setMaxParallelism(int maxParallelism)手动定义每个作业和/或每个操作符。</p>

<p>任何进入生产环境的Flink作业都应该指定最大的并行度。但是，这个值的决定应该经过仔细考虑，因为此时，一旦设置了最大并行度，就不能在稍后的阶段更新它。更改最大并行度的Flink作业只能使用全新的状态从头开始。在更改最大并行度时，从以前的检查点或保存点进行恢复不可用。</p>

<p>建议将最大并行度设置为足以满足应用程序未来对可伸缩性和可用性的需求，同时又相对较低，以避免影响应用程序的总体性能。这是由于这样一个事实:在具有最高并行度的情况下，Flink为其重新伸缩的能力维护某些元数据，这可能会增加Flink应用程序的总体状态大小。</p>

<p>Flink文档提供了关于如何<a href="https://ci.apache.org/projects/flink/flink-docs-stable/ops/state/large_state_tuning.html">使用检查点配置使用大状态的应用程序</a>的额外信息和指导。</p>

<h2>2. 为Flink运算符分配唯一的用户id (uuid)</h2>

<p>对于有状态Flink应用程序，建议为所有运算符分配惟一的用户id (uuid)。这是必要的，因为一些内置Flink运算符(比如windows)是有状态的，而其他运算符可能是无状态的，这使得很难知道哪些内置运算符实际上是有状态的，哪些不是。</p>

<p>Flink运算符的uuid可以使用uid(String uid)方法分配。运算符uuid允许Apache Flink有效地将运算符状态从保存点映射到适当的运算符，这是保存点在Flink应用程序中正常工作所必需的元素。</p>

<h2>3.全面考虑Flink应用程序的状态后端</h2>

<p>在投入生产之前，开发人员和工程领导应该仔细考虑他们的Flink应用程序的状态后端类型，因为Apache Flink目前不支持状态后端互操作性。这使得有必要从保存点恢复状态，用于最初获取保存点的相同状态后端。</p>

<p>在之前的一篇<a href="https://data-artisans.com/blog/stateful-stream-processing-apache-flink-state-backends">博客</a>文章中介绍了Apache Flink中目前支持的3种状态后端之间的差异。</p>

<p>对于生产用例，强烈建议使用RocksDB状态后端，因为这是目前唯一一种支持大状态和异步操作(如快照)的状态后端，这些操作允许在不停止Flink操作的情况下编写快照。另一方面，使用RocksDB状态后端可能会带来性能折衷，因为所有状态访问和检索都需要序列化(和反序列化)才能跨越JNI边界，这可能会影响应用程序的吞吐量(与内存状态后端相比)。</p>

<h2>4. 使作业管理器具有高可用性(HA)</h2>

<p>高可用性(HA)配置确保Flink应用程序中的JobManager组件的潜在故障能够自动恢复，从而最大限度地减少停机时间。JobManager的主要职责是协调Flink部署，比如调度和适当的资源分配。</p>

<p>默认情况下，Flink为每个Flink集群设置一个JobManager实例。这将创建一个单点故障点(SPOF):如果JobManager崩溃，则无法提交任何新程序，并且正在运行的程序会失败。因此，强烈建议为生产环境<a href="https://ci.apache.org/projects/flink/flink-docs-stable/ops/config.html#high-availability-ha">配置高可用性HA</a>。</p>

<p>以上4个步骤遵循社区设置的最佳实践，这些实践允许Flink应用程序在维护状态的同时任意扩展，处理更大容量的数据流和状态，并增加它们的可用性保证——生产用例的特定需求。Apache Flink文档中的<a href="https://ci.apache.org/projects/flink/flink-docs-stable/ops/">部署和操作</a>部分为稳定的Flink操作提供了额外的指导和支持。我们强烈建议在将应用程序转移到生产环境之前，遵循上述步骤并仔细阅读文档。</p>

<p class='post-footer'>
            显示信息
            <a href='http://untitled-life.github.io/blog/2019/03/09/4-steps-to-get-your-flink-application-ready-for-production/'>http://untitled-life.github.io/blog/2019/03/09/4-steps-to-get-your-flink-application-ready-for-production/</a><br/>
            written by <a href='http://untitled-life.github.io'>Mike Cao</a>
            &nbsp;posted at <a href='http://untitled-life.github.io'>http://untitled-life.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Introduction to the Presto]]></title>
    <link href="http://untitled-life.github.io/blog/2019/02/25/an-introduction-to-the-presto/"/>
    <updated>2019-02-25T12:19:25+08:00</updated>
    <id>http://untitled-life.github.io/blog/2019/02/25/an-introduction-to-the-presto</id>
    <content type="html"><![CDATA[<p>斜坡上的杂化野草，谁说不是一草一千秋，一花一世界呢？ &ndash;龙应台 《目送》</p>

<!-- more -->


<h1>先来个背景</h1>

<p>大数据持续火热，需要处理的数据越来越多，在大数据技术的浪潮中，出现了很多优秀的工具和产品，其中最具影响力的非Hadoop莫属，Hadoop提供了存储和计算方案，基本解决了大数据处理遇到的问题。但是也暴露了一些问题，如基于Hadoop的Map-Reduce计算框架，仅适合批量的离线计算，虽然吞吐率可以满足，但计算效率不能满足即席查询Ad-Hoc的性能要求，有了市场痛点，相应的解决痛点的产品就会应声而出，所以Presto就在Facebook诞生了。</p>

<h1>如何描述这货呢</h1>

<p>Presto是一个开源的分布式SQL查询引擎，用于对 GB 到 PB 量级的数据源，进行交互式查询。</p>

<h1>这货能干啥</h1>

<p>Presto可以查询多种平台上的数据，包括Hive、Cassandra、关系数据库甚至专有数据存储，并且可以将多个数据源的数据进行组合查询。Presto的目标客户是那些预期查询响应时间从亚秒到分钟不等的分析师。之前的数据分析工具分为两种：一种是使用昂贵的商业解决方案进行快速分析，另外一种是需要过多硬件的缓慢的“免费”解决方案。Presto提供的方案不用以上两种，但同时具备了他们的优点：分析速度快、免费。</p>

<h1>特点列举</h1>

<table>
<thead>
<tr>
<th> 特点  </th>
<th> 说明  </th>
</tr>
</thead>
<tbody>
<tr>
<td>多数据源   </td>
<td> 可以支持MySQL、PG、Cassandra、Hive、Kafka、JMX等多种数据源 </td>
</tr>
<tr>
<td>扩展性  </td>
<td> 设计非常牛X, 扩展性非常强悍，目测是Apache产品扩展性前三的产品  </td>
</tr>
<tr>
<td>支持SQL查询  </td>
<td>完全支持ANSI SQL, 并带有Presto特有的SQL扩展项   </td>
</tr>
<tr>
<td>流水线   </td>
<td>基于Pipeline模式设计，在海量数据处理过程中，终端用户不用等待所有的数据都处理完毕后才能看到结果，一旦计算开始，结果数据就会一部分一部分的产出，并被终端用户看到   </td>
</tr>
<tr>
<td>混合计算    </td>
<td>针对一种类型的Connector可以配置一个或者多个Catalog，终端用户可以混合多个Catalog进行相关的计算，例如stats和hive的表进行join   </td>
</tr>
<tr>
<td>高性能     </td>
<td>查询性能是Hive MR的10倍以上   </td>
</tr>
</tbody>
</table>


<h1>基本概念</h1>

<h2>服务进程</h2>

<p>Presto中有两种类型的服务进程: Coordinators服务进程和Workers服务进程；</p>

<h3>Coordinators服务进程</h3>

<p>Coordinators服务进程部署于集群中一个独立的节点上，是Presto集群的管理节点。主要的作用包括接受查询请求、解析查询语句、生成查询执行计划、任务调度和Worker进程管理。不仅与Worker进程进行通信从而获得Worker的状态信息，还需要与Client进行通信，接受查询请求等。</p>

<h3>Worker服务进程</h3>

<p>Worker进程主要是执行查询任务，直白说就是真正干活的。一个Presto集群中，存在一个Coordinators节点个多个Worker节点，Coordinators节点是管理节点，Worker节点是工作节点。在每个Worker节点上都会存在至少一个Worker服务进程，该服务进程主要进行数据处理及任务Task的执行。</p>

<h2>连接器(Connector)</h2>

<p>Presto是通过各种连接器(Connector)来访问不同的数据源的，可以将连接器(Connector)当作Presto访问各种数据源的驱动程序。连接器(Connector)是Presto的SPI的实现，允许Presto使用标准API与资源进行交互。
Presto包含多个内置连接器(Connector)，并且允许第三方开发自定义连接器(Connector)，以便Presto能够访问各种数据源中的数据。</p>

<h2>目录(Catalog)</h2>

<p>Presto中的目录(Catalog)类似于MySQL中的一个数据库实例，每个目录(Catalog)都与特定的连接器(Connector)相关联。可以让多个目录(Catalog)使用同一个连接器(Connector)访问相同数据库的两个不同实例。例如，如果您有两个Hive集群，您可以在一个Presto集群中配置两个目录(Catalog)，它们都使用Hive连接器(Connector)，允许您从两个Hive集群(甚至在同一个SQL查询中)查询数据。</p>

<h2>模式(Schema)</h2>

<p>模式(Schema)是组织表的一种方式。类似MySQL中的Database。目录(Catalog)和模式(Schema)一起定义了一组可以查询的表。当使用Presto访问Hive或PG等关系数据库时，模式(Schema)在目标数据库中转换为Database的概念。其他类型的连接器(Connector)可以选择对底层数据源有意义的方式将表组织到模式(Schema)中。</p>

<h2>表(Table)</h2>

<p>表(Table)是一组无序的行，它们被组织成具有类型的命名列。与传统数据库中的Table含义是一样的，从数据源到表(Table)的映射是由连接器(Connector)定义的。</p>

<h1>查询执行模型</h1>

<p>Presto在执行SQL语句时，会将这些语句转换为可在分布式Coordinators和Worker节点上执行的查询。</p>

<p><img src="http://untitled-life.github.io/images/post/query_planner.png" alt="query_planner" /></p>

<h2>语句(Statement)</h2>

<p>其实就是我们输入的SQL语句，这种语句由子句(Clause)、表达式(Expression)、断言(Predicate)组成.</p>

<h2>查询执行(Query)</h2>

<p>当Presto接受一个SQL语句(Statement)后，会解析该SQL语句(Statement)，将其转换成一个查询执行(Query)和相关的查询执行计划。一个查询执行表示可以在Presto集群上运行的查询，是由运行在各个Worker上且各自之间相互关联的阶段(Stage)组成的。这表名在Presto中，语句(Statement)和查询(Query)是两个不同的概念。两者的区别在于：语句(Statement)是用文字表示的SQL执行语句，而查询执行(Query)是由阶段(Stage)、任务(Task)、驱动器(Driver)、分片(Split)、操作符(Operator)和数据源(Data Source)组成，这些组件通过内部联系共同组成了一个查询执行，从而得到SQL语句表述的查询。</p>

<h2>阶段(Stage)</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Stage: unit of work that does not require shuffling</span></code></pre></td></tr></table></div></figure>


<p>Stage表示查询执行阶段。当Presto运行查询执行(Query)时，Presto会将一个查询执行(Query)拆分成具有层次关系的多个阶段(Stage),一个阶段(Stage)代表查询执行计划的一部分。例如，我们执行一个查询，从Hive的某张表中查询数据并进行一些聚合操作，Presto会创建一个Root Stage, 该Stage聚合其上游Stage的输出数据，然后将结果输出给Coordinator, 并由Coordinator将结果输出给终端用户。
阶段(Stage)是有层级关系的，每个查询执行(Query)都会有一个Root Stage, 该阶段(Stage)用于聚集上游阶段(Stage)的输出数据，并将最终结果反馈给用户。再次强调，阶段(Stage)只是Coordinator用于对查询执行计划进行管理和建模的逻辑概念。阶段(Stage)根据作用可分为以下四类：</p>

<table>
<thead>
<tr>
<th> Stage类型  </th>
<th> 作用  </th>
</tr>
</thead>
<tbody>
<tr>
<td> Coordinator_Only Stage  </td>
<td> 表结构的变更(创建或者更改)  </td>
</tr>
<tr>
<td> Single or Root Stage  </td>
<td> 聚合上游Stage的输出数据，并将最终数据输出给终端用户  </td>
</tr>
<tr>
<td> Fixed Stage  </td>
<td> 接收子Stage产出的数据并在集群中对这些数据进行分布式的聚合或者分组计算  </td>
</tr>
<tr>
<td> Source Stage  </td>
<td> 链接数据源的Stage, 负责从数据源读取数据，同时会对查询执行计划的优化结果完成相应的操作，如断言下发、条件过滤等。  </td>
</tr>
</tbody>
</table>


<h2>任务(Task)</h2>

<p>上面讲到的Stage并不会在Presto集群中实际运行，他仅仅代表针对于一个SQL语句查询执行(Query)中的一部分查询的执行过程，只是用来对查询执行(Query)计划进行管理和建模。Stage在逻辑上被分为一系列的任务(Task), 而这些任务(Task)则是需要实际运行在Presto的各个Worker节点上的。Presto的层次设计非常清晰，一个查询执行(Query)被分解成具有层析关系的多个阶段(Stage),一个阶段(Stage)又被拆分成一系列的任务(Task),每个任务(Task)处理一个或者读个分片(Split)；每个阶段(Stage)被分解成多个任务(Task), 从而可以并行的执行一个阶段(Stage);任务(Task)也采用了相同的机制，一个Task也被分成了多个驱动器(Driver)，从而可以并行的执行一个任务(Task);</p>

<h2>驱动器(Driver)</h2>

<p>任务(Task)包含一个或多个并行驱动器(Driver)。驱动器(Driver)对数据进行操作，并结合操作符(Operator)生成输出，然后由一个任务(Task)聚合输出，然后在另一个阶段(Stage)交付给另一个任务(Task)。驱动器(Driver)是操作符(Operator)实例的序列，或者您可以将驱动器(Driver)看作内存中的操作符(Operator)的物理集合。它是Presto架构中最低的并行级别。</p>

<h2>分片(Split)</h2>

<p>一个分片(Split)其实就是一个大的数据集中的一个小的子集，分布式查询计划的最低级别阶段通过连接器的片段检索数据，而分布式查询计划(Query)的较高级别阶段从其他阶段(Stage)检索数据。当Presto调度查询时，协调器(Coordinator)将查询连接器(Connector)，以获得表可用的所有分片(Split)的列表。协调器(Coordinator)跟踪哪些机器正在运行哪些任务(Task)，以及哪些分片(Split)由哪些任务(Task)处理。</p>

<h2>操作符(Operator)</h2>

<p>一个操作符(Operator)代表对一个分片(Split)的一种操作，例如过滤、转换等。一个操作符(Operator)依次读取一个分片(Split)中的数据，将操作符(Operator)所代表的计算和操作用于分片(Split)的数据上，并产生输出。每个操作符(Operator)均会以页(Page)为最小处理单位分别读取输入数据和产出输出数据。操作符(Operator)每次一会读取一个页(Page)对象，同理也只会产生一个页(Page)对象。
page## 页(Page)
页(Page)是Presto中处理的最小数据单元，一个页(Page)对象包含多个数据Block； 可以将数据Block理解成一个字节数组，存储一个字段的若干行；多个Block横切的一行其实就是一行真实的数据。下图展示了Page和Block的关系</p>

<p><img src="http://untitled-life.github.io/images/post/page_block.png" alt="page_block" /></p>

<h2>交换(Exchange)</h2>

<p>交换(Exchange)用于查询的不同阶段(Stage)的Presto节点之间的数据传输。任务(Task)将数据生成到输出缓冲区中，下游阶段(Stage)通过名为Exchange Client的Exchange从上游阶段(Stage)读取数据。 交换(Exchange)其实就是用于完成具有上下游关系的阶段(Stage)之间的数据交换。</p>

<h2>模型关系</h2>

<p><img src="http://untitled-life.github.io/images/post/modle_relation.png" alt="modle_relation" /></p>

<h1>整体架构</h1>

<p>下面两张图(有色和无色)比较直观的表示出Presto的整体架构，主从结构在大数据项目上真是无所不在。</p>

<h2>无色结构图</h2>

<p><img src="http://untitled-life.github.io/images/post/presto_architecture.jpg" alt="presto_architecture" /></p>

<h2>无色结构图</h2>

<p><img src="http://untitled-life.github.io/images/post/presto_architecture2.png" alt="presto_architecture2" /></p>

<h2>查询执行步骤</h2>

<ul>
<li>客户端将SQL发送给Presto集群的Coordinator</li>
<li>Coordinator收到查询语句后，对语句进行解析，生成查询执行计划，并且会根据数据本地性生成对应的HttpRemoteTask</li>
<li>Coordinator将每个Task发送到对应的Worker上，策略就是数据本地性</li>
<li>执行处于上游Source Stage中的Task,主要是从Connector读取数据</li>
<li>处于下游Stage的Task读取上游Stage产出的数据结果，并在该Stage每个Task所在的Worker的内存中进行后续的计算和处理</li>
<li>Coordinator将Task分发后，就会连续不断的从Root Stage中的Task获取计算结果，并缓存起来，直到所有计算结束</li>
<li>Client提交查询后，会不停的从Coordinator获取查询结果，获取一部分展示一部分，结果全部获取完表示查询结束

<h1>应用场景</h1></li>
<li>Ad-Hoc(常用)</li>
<li>ETL(INSERT INTO TABLE AS SELECT )</li>
<li>Pseudo Real Time Computation(Kakfa-Connector)

<h1>总结</h1>

<p>从背景、功能、特点、概念、架构、使用场景等角度描述了Presto，算是入门篇吧~~~</p></li>
</ul>


<p class='post-footer'>
            显示信息
            <a href='http://untitled-life.github.io/blog/2019/02/25/an-introduction-to-the-presto/'>http://untitled-life.github.io/blog/2019/02/25/an-introduction-to-the-presto/</a><br/>
            written by <a href='http://untitled-life.github.io'>Mike Cao</a>
            &nbsp;posted at <a href='http://untitled-life.github.io'>http://untitled-life.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Baby Steps to Develop a Flink Application]]></title>
    <link href="http://untitled-life.github.io/blog/2019/01/06/5-baby-steps-to-develop-a-flink-application/"/>
    <updated>2019-01-06T10:25:13+08:00</updated>
    <id>http://untitled-life.github.io/blog/2019/01/06/5-baby-steps-to-develop-a-flink-application</id>
    <content type="html"><![CDATA[<p>一个人固然寂寞，两个人孤灯下无言相对却可以更寂寞。 &ndash;龙应台 《目送》</p>

<!-- more -->


<p>Getting up and running with Flink is easy as ABC. In this post, we go over 5 “baby” steps to guide you through setting up your first running Flink application locally. We discuss the software requirements to get started and point out some training resources that will help you understand the functionality of the framework. We also show you how to bootstrap an application, if you prefer to start from scratch! This quick overview should enable you to spin up a Flink application in close to no time.</p>

<h2>Software requirements</h2>

<p>You can develop and execute Flink applications on Linux, Mac OS X and Windows. Because most of the developers in the community operate in Unix-based setups, this environment includes the richest tooling support. To get started, the only real requirement is to have a Java Development Kit (JDK) 8 (or higher) installed — regardless of whether you are going to use Java or Scala for development. Although it is not strictly required to develop Flink applications, we recommend that you also set up the following software on your machine:</p>

<ul>
<li>Apache Maven 3.x. Most examples in our introduction trainings assume Maven for build automation. Moreover, Flink provides Maven archetypes to bootstrap new Flink Maven projects.</li>
<li>an IDE for Java and/or Scala development. Especially if you are going for Scala, we recommend using IntelliJ due to its out-of-the-box support for Maven and easy-to-install Scala plugin. For Java, Eclipse or Netbeans will work just as well.</li>
</ul>


<h2>Training material to get you going</h2>

<p>If you prefer to start your own project from scratch, then feel free to skip to this and go directly to the next step. Otherwise, data Artisans provides a whole range of training exercises that will help you become familiar with how Flink operates and ease you over time into more complex topics such as time and state management. These exercises (and possible solutions) are available on GitHub, so you can easily clone the project and use Maven to build it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/dataArtisans/flink-training-exercises.git
</span><span class='line'><span class="nb">cd </span>flink-training-exercises
</span><span class='line'>mvn clean package
</span></code></pre></td></tr></table></div></figure>


<p>This should take a couple of minutes, depending on the speed of your connection — Maven will download all the required dependencies. If everything goes as expected and the build is successful, you are on the right track!</p>

<h2>Bootstrapping your own Flink project</h2>

<p>Getting started from an existing project is the easiest way to make your first steps in application development with Flink, sure. But what if you want to create your own project from scratch at some point? Flink provides Maven archetypes to generate Maven projects for both Java and Scala applications. To create a quickstart Java project as a basis for your Flink application, for instance, run the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mvn archetype:generate <span class="se">\</span>
</span><span class='line'>-DarchetypeGroupId<span class="o">=</span>org.apache.flink <span class="se">\</span>
</span><span class='line'>-DarchetypeArtifactId<span class="o">=</span>flink-quickstart-java <span class="se">\</span>
</span><span class='line'>-DarchetypeVersion<span class="o">=</span>1.7.0
</span></code></pre></td></tr></table></div></figure>


<p>The command above generates a Maven project for Flink 1.7.0 containing two classes: StreamingJob and BatchJob; that respectively provide the basic skeletons for a streaming and batch Flink program. You can adapt the parameters to match your version and naming preferences! We recommend that you import the project into your IDE of choice to get your hands on developing a runnable example. In case you are struggling with inspiration, you can get some hints in the Flink documentation.</p>

<h2>Running and debugging your first Flink application</h2>

<p>Although Flink is a distributed data processing system, it is easier to get started in a local environment, using just your machine. In a typical setting, you would have the master (JobManager) and workers (TaskManagers) running as separate JVM processes on separate machines; but Flink also includes a mode that allows you to execute applications within the same JVM as a multi-threaded process. This mode allows you to easily develop, debug and execute your Flink application within an IDE pretty much like any other Java or Scala project. To start your application, just run the main() method as you would normally!</p>

<p><img src="http://untitled-life.github.io/images/post/first_flink_application.png" alt="first_flink_application" /></p>

<h2>Monitoring your Flink application</h2>

<p>If you are wondering what is happening under the hood of your running application, you can easily make use of the web interface that is bundled up in Flink to visualize and monitor it. To enable the interface for your local development, you will need to add a new dependency to your POM file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="err">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="err">&lt;groupId&gt;org.apache.flink&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="err">&lt;artifactId&gt;flink-runtime-web_2.11&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="err">&lt;version&gt;${flink.version}&lt;/version&gt;</span>
</span><span class='line'><span class="err">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And explicitly create a local execution environment with the required configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.apache.flink.configuration.ConfigConstants</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Configuration</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Configuration</span><span class="o">();</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="na">setBoolean</span><span class="o">(</span><span class="n">ConfigConstants</span><span class="o">.</span><span class="na">LOCAL_START_WEBSERVER</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="n">StreamExecutionEnvironment</span> <span class="n">env</span> <span class="o">=</span> <span class="n">StreamExecutionEnvironment</span><span class="o">.</span><span class="na">createLocalEnvironment</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Flink web interface should now be available under <a href="http://localhost:8081">http://localhost:8081</a> once you get your program running, and look somewhat like the images below. Remember to update the Maven project once you change the POM file, if you don’t have auto-import enabled in your IDE — this might lead to an error when you first try to access the web interface.</p>

<p><img src="http://untitled-life.github.io/images/post/flink_web_interface.png" alt="flink_web_interface" /></p>

<p>Congratulations! You have just run your first Flink application in an IDE. A tutorial in the Flink documentation goes one step further and shows how to setup a local Flink cluster and submit a job just like submitting it to a remote cluster.</p>

<p>We encourage you to have a look through the Flink documentation for further support or more detailed information. If at any point you feel lost or have any questions: our community is very active on Stack Overflow, and you can also reach out to the developers using the Mailing List. The data Artisans Standard training goes through the training exercises in more detail, so if you would prefer to get some personal guidance, you can find more about future trainings and locations here. We are looking forward to your next adventures with Flink!flri</p>

<p class='post-footer'>
            显示信息
            <a href='http://untitled-life.github.io/blog/2019/01/06/5-baby-steps-to-develop-a-flink-application/'>http://untitled-life.github.io/blog/2019/01/06/5-baby-steps-to-develop-a-flink-application/</a><br/>
            written by <a href='http://untitled-life.github.io'>Mike Cao</a>
            &nbsp;posted at <a href='http://untitled-life.github.io'>http://untitled-life.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Difference of ETL vs ELT]]></title>
    <link href="http://untitled-life.github.io/blog/2018/12/29/the-difference-of-etl-vs-elt/"/>
    <updated>2018-12-29T11:04:31+08:00</updated>
    <id>http://untitled-life.github.io/blog/2018/12/29/the-difference-of-etl-vs-elt</id>
    <content type="html"><![CDATA[<p>一个人走路，才是你和风景之间的单独私会。 &ndash;龙应台 《目送》</p>

<!-- more -->


<p>For the last couple of decades ETL (extract, transform, load) has been the traditional approach for data warehousing and analytics. The ELT (extract, load, transform) approach changes the old paradigm. But, what’s actually happening when the “T” and “L” are switched?</p>

<p>ETL and ELT solve the same need:</p>

<blockquote><p>Billions of data and events need to be collected, processed and analyzed by businesses. The data needs to be be clean, manageable and ready to analyze. It needs to be enriched, molded and transformed. To make it meaningful.</p></blockquote>

<p>But, the <strong>“how”</strong> is what’s different and leads to new possibilities in many modern data projects. There are differences in how raw data is managed, when processing is done and how analysis is performed.</p>

<p>In this article, we’ll demonstrate the ETL and ELT technological differences showing data engineering and analysis examples of the two approaches and summarizing <strong>10 pros and cons of ETL and ELT.</strong></p>

<p><strong>The Technological Differences: Lets first align on the 3 stages - E, T, L:</strong></p>

<ul>
<li><strong>Extraction</strong>: Retrieving raw data from an unstructured data pool and migrating it into a temporary, staging data repository</li>
<li><strong>Transformation</strong>: Structuring, enriching and converting the raw data to match the target source</li>
<li><strong>Loading</strong>: Loading the structured data into a data warehouse to be analyzed and used by business intelligence (BI) tools</li>
</ul>


<h2>ETL vs. ELT: What is ETL?</h2>

<p>ETL requires management of the raw data, including the extraction of the required information and running the right transformations to ultimately serve the business needs. Each stage - extraction, transformation and loading - requires interaction by data engineers and developers, and dealing with capacity limitations of traditional data warehouses. Using ETL, analysts and other BI users have become accustomed to waiting, since simple access to the information is not available until the whole ETL process has been completed.</p>

<p><img src="http://untitled-life.github.io/images/post/ETL.jpeg" alt="ETL" /></p>

<h2>What is ELT?</h2>

<p>In the ELT approach, after you’ve extracted your data, you immediately start the loading phase - moving all the data sources into a single, centralized data repository. With today’s infrastructure technologies using the cloud, systems can now support large storage and scalable compute. Therefore, a large, expanding data pool and fast processing is virtually endless for maintaining all the extracted raw data.</p>

<p><img src="http://untitled-life.github.io/images/post/ELT.jpeg" alt="ELT" /></p>

<p>In this way, the ELT approach provides a modern alternative to ETL. However, it’s still evolving. Therefore, the frameworks and tools to support the ELT process are not always fully developed to facilitate load and processing of large amount of data. The upside is very promising - enabling unlimited access to all of your data at any time and saving developers efforts and time for BI users and analysts.</p>

<h2>Summarizing 10 Pros &amp; Cons of ETL and ELT</h2>

<p><strong>1. Time - Load</strong></p>

<p>ETL: Uses staging area and system, extra time to load data</p>

<p>ELT: All in one system, load only once</p>

<p><strong>2. Time - Transformation</strong></p>

<p>ETL: Need to wait, especially for big data sizes - as data grows, transformation time increases</p>

<p>ELT: All in one system, speed is not dependent on data size</p>

<p><strong>3. Time - Maintenance</strong></p>

<p>ETL: High maintenance - choice of data to load and transform and must do it again if deleted or want to enhance the main data repository</p>

<p>ELT: Low maintenance - all data is always available</p>

<p><strong>4. Implementation complexity</strong></p>

<p>ETL: At early stage, requires less space and result is clean</p>

<p>ELT: Requires in-depth knowledge of tools and expert design of the main large repository</p>

<p><strong>5. Analysis &amp; processing style</strong></p>

<p>ETL: Based on multiple scripts to create the views - deleting view means deleting data</p>

<p>ELT: Creating adhoc views - low cost for building and maintaining</p>

<p><strong>6. Data limitation or restriction in supply</strong></p>

<p>ETL: By presuming and choosing data a priori</p>

<p>ELT: By HW (none) and data retention policy</p>

<p><strong>7. Data warehouse support</strong></p>

<p>ETL: Prevalent legacy model used for on-premises and relational, structured data</p>

<p>ELT: Tailored to using in scalable cloud infrastructure to support structured, unstructured such big data sources</p>

<p><strong>8. Data lake support</strong></p>

<p>ETL: Not part of approach</p>

<p>ELT: Enables use of lake with unstructured data supported</p>

<p><strong>9. Usability</strong></p>

<p>ETL: Fixed tables, Fixed timeline, Used mainly by IT</p>

<p>ELT: Ad Hoc, Agility, Flexibility, Usable by everyone from developer to citizen integrator</p>

<p><strong>10. Cost-effective</strong></p>

<p>ETL: Not cost-effective for small and medium businesses</p>

<p>ELT: Scalable and available to all business sizes using online SaaS solutions</p>

<p class='post-footer'>
            显示信息
            <a href='http://untitled-life.github.io/blog/2018/12/29/the-difference-of-etl-vs-elt/'>http://untitled-life.github.io/blog/2018/12/29/the-difference-of-etl-vs-elt/</a><br/>
            written by <a href='http://untitled-life.github.io'>Mike Cao</a>
            &nbsp;posted at <a href='http://untitled-life.github.io'>http://untitled-life.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wide vs Narrow Dependencies]]></title>
    <link href="http://untitled-life.github.io/blog/2018/12/27/wide-vs-narrow-dependencies/"/>
    <updated>2018-12-27T17:41:52+08:00</updated>
    <id>http://untitled-life.github.io/blog/2018/12/27/wide-vs-narrow-dependencies</id>
    <content type="html"><![CDATA[<p>太疼的伤口，你不敢去触碰；太深的忧伤，你不敢去安慰；太残酷的残酷，有时候，你不敢去注视。 &ndash;龙应台 《目送》</p>

<!-- more -->


<p>In this session, we are going to focus on wide versus narrow dependencies, which dictate relationships between RDDs in graphs of computation, which we&rsquo;ll see has a lot to do with shuffling.</p>

<p>So far, we have seen that some transformations significantly more expensive (latency) than others.</p>

<p>In this session we will:</p>

<ul>
<li>look at how RDD&rsquo;s are represented</li>
<li>dive into how and when Spark decides it must shuffle data</li>
<li>see how these dependencies make fault tolerance possible</li>
</ul>


<h2>Lineages</h2>

<p>Computations on RDDs are represented as a lineage graph, a DAG representing the computations done on the RDD. This representation/DAG is what Spark analyzes to do optimizations. Because of this, for a particular operation, it is possible to step back and figure out how a result of a computation is derived from a particular point.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">rdd</span> <span class="k">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">textFile</span><span class="o">(...)</span>
</span><span class='line'><span class="k">val</span> <span class="n">filtered</span> <span class="k">=</span> <span class="n">rdd</span><span class="o">.</span><span class="n">map</span><span class="o">(...).</span><span class="n">filter</span><span class="o">(...).</span><span class="n">persist</span><span class="o">()</span>
</span><span class='line'><span class="k">val</span> <span class="n">count</span> <span class="k">=</span> <span class="n">filtered</span><span class="o">.</span><span class="n">count</span><span class="o">()</span>
</span><span class='line'><span class="k">val</span> <span class="n">reduced</span> <span class="k">=</span> <span class="n">filtered</span><span class="o">.</span><span class="n">reduce</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://untitled-life.github.io/images/post/lineage_graph.png" alt="lineage_graph" /></p>

<h2>How RDDs are represented</h2>

<p>RDDs are made up of 4 parts:</p>

<ul>
<li>Partitions: Atomic pieces of the dataset. One or many per compute node.</li>
<li>Dependencies: Models relationship between this RDD and its partitions with the RDD(s) it was derived from. (Note that the dependencies maybe modeled per partition as shown below).</li>
<li>A function for computing the dataset based on its parent RDDs.</li>
<li>Metadata about it partitioning scheme and data placement.</li>
</ul>


<p>/Users/caolei/IdeaProjects/untitled-life/source/images/post/.png</p>

<p><img src="http://untitled-life.github.io/images/post/rdd_anatomy_1.png" alt="rdd_anatomy_1" /></p>

<p><img src="http://untitled-life.github.io/images/post/rdd_anatomy_2.png" alt="rdd_anatomy_2" /></p>

<h2>RDD Dependencies and Shuffles</h2>

<p>Previously we saw the Rule of thumb: a shuffle can occur when the resulting RDD depends on other elements from the same RDD or another RDD.</p>

<p><strong>In fact, RDD dependencies encode when data must move across network</strong>. Thus they tell us when data is going to be shuffled.</p>

<p>Transformations cause shuffles, and can have 2 kinds of dependencies:
1. Narrow dependencies: Each partition of the parent RDD is used by at most one partition of the child RDD.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>[parent RDD partition] ---&gt; [child RDD partition]
</span></code></pre></td></tr></table></div></figure>


<p><strong>Fast</strong>! No shuffle necessary. Optimizations like pipelining possible. Thus transformations which have narrow dependencies are fast.</p>

<ol>
<li>Wide dependencies: Each partition of the parent RDD may be used by multiple child partitions</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>                   ---&gt; [child RDD partition 1]
</span><span class='line'>[parent RDD partition] ---&gt; [child RDD partition 2]
</span><span class='line'>                   ---&gt; [child RDD partition 3]
</span></code></pre></td></tr></table></div></figure>


<p><strong>Slow</strong>! Shuffle necessary for all or some data over the network. Thus transformations which have narrow dependencies are slow.</p>

<h3>Visual: Narrow dependencies Vs. Wide dependencies</h3>

<p><img src="http://untitled-life.github.io/images/post/narrow_vs_wide_dependencies.png" alt="narrow_vs_wide_dependencies" /></p>

<h3>Visual: Example</h3>

<p>Assume that we have a following DAG:</p>

<p><img src="http://untitled-life.github.io/images/post/visual_dag.png" alt="visual_dag" /></p>

<p>What do the dependencies look like? Which are wide and which are narrow?</p>

<p><img src="http://untitled-life.github.io/images/post/visual_dag_resolved.png" alt="visual_dag_resolved" /></p>

<p>The B to G join is narrow because groupByKey already partitions the keys and places them appropriately in B after shuffling.</p>

<p>Thus operations like join can <strong>sometimes be narrow and sometimes be wide.</strong></p>

<p><strong>Transformations with (usually) Narrow dependencies:</strong>
- map
- mapValues
- flatMap
- filter
- mapPartitions
- mapPartitionsWithIndex</p>

<p><strong>Transformations with (usually) Wide dependencies: (might cause a shuffle)</strong>
- cogroup
- groupWith
- join
- leftOuterJoin
- rightOuterJoin
- groupByKey
- reduceByKey
- combineByKey
- distinct
- intersection
- repartition
- coalesce</p>

<p><strong>This list usually holds, but as seen above, in case of join, depending on the use case, the dependency of an operation may be different from the above lists</strong></p>

<h3>How can I find out?</h3>

<p>dependencies method on RDDs: returns a sequence of Dependency objects, which are actually the dependencies used by Spark&rsquo;s scheduler to know how this RDD depends on RDDs.</p>

<p>The sorts of dependency objects that this method may return include:</p>

<ul>
<li><p>Narrow dependency objects</p>

<ul>
<li>OneToOneDependency</li>
<li>PruneDependency</li>
<li>RangeDependency</li>
</ul>
</li>
<li><p>Wide dependency objects</p>

<ul>
<li>ShuffleDependency</li>
</ul>
</li>
</ul>


<p>Another method toDebugString prints out a visualization of the RDD lineage along with other information relevant to scheduling. For example, indentations in the output separate groups of narrow transformations that may be pipelined together with wide transformations that require shuffles. These groupings are called <strong>stages.</strong></p>

<h5>Example</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">wordsRDD</span> <span class="k">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">parallelize</span><span class="o">(</span><span class="n">largeList</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* dependencies */</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">pairs</span> <span class="k">=</span> <span class="n">wordsRdd</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">c</span><span class="o">=&gt;(</span><span class="n">c</span><span class="o">,</span><span class="mi">1</span><span class="o">))</span>
</span><span class='line'>                    <span class="o">.</span><span class="n">groupByKey</span>
</span><span class='line'>                    <span class="o">.</span><span class="n">dependencies</span>          <span class="c1">// &lt;-------------</span>
</span><span class='line'><span class="c1">// pairs: Seq[org.apache.spark.Dependency[_]] = List(org.apache.spark.ShuffleDependency@4294a23d)</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* toDebugString */</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">pairs</span> <span class="k">=</span> <span class="n">wordsRdd</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">c</span><span class="o">=&gt;(</span><span class="n">c</span><span class="o">,</span><span class="mi">1</span><span class="o">))</span>
</span><span class='line'>                    <span class="o">.</span><span class="n">groupByKey</span>
</span><span class='line'>                    <span class="o">.</span><span class="n">toDebugString</span>         <span class="c1">// &lt;-------------</span>
</span><span class='line'><span class="c1">// pairs: String =</span>
</span><span class='line'><span class="c1">// (8) ShuffledRDD[219] at groupByKey at &lt;console&gt;:38 []</span>
</span><span class='line'><span class="c1">//  +-(8) MapPartitionsRDD[218] at map at &lt;console&gt;:37 []</span>
</span><span class='line'><span class="c1">//     | ParallelCollectionRDD[217] at parallelize at &lt;console&gt;:36 []</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Lineages and Fault Tolerance</h2>

<p><strong>Lineages are the key to fault tolerance in Spark</strong></p>

<p>Ideas from <strong>functional programming</strong> enable fault tolerance in Spark:</p>

<ul>
<li>RDDs are immutable</li>
<li>We use higher-order-functions like map,flatMap,filter to do functional transformations on this immutable data</li>
<li>A function for computing the dataset based on its parent RDDs also is part of an RDD&rsquo;s representation.</li>
</ul>


<p>We just need to keep the information required by these 3 properties.</p>

<p>Along with keeping track of the dependency information between partitions as well, these 3 properties allow us to: <strong>Recover from failures by recomputing lost partitions from lineage graphs</strong>, as it is easy to back track in a lineage graph.</p>

<p>Thus we get Fault Tolerance without having to write the RDDs/Data to the disk! The whole data can be re-derived using the above information.</p>

<h3>Visual Example</h3>

<p>Lets assume one of our partitions from our previous example fails:</p>

<p><img src="http://untitled-life.github.io/images/post/fault_tol_1.png" alt="fault_tol_1" /></p>

<p>We only have to recompute the data shown below to get back on track:</p>

<p><img src="http://untitled-life.github.io/images/post/fault_tol_2.png" alt="fault_tol_2" /></p>

<p>Recomputing missing partitions is <strong>fast for narrow</strong> but <strong>slow for wide</strong> dependencies. So if above, a partition in G would have failed, it would have taken us more time to recompute that partition. So losing partitions that were derived from a transformation with wide dependencies, can be much slower.<p class='post-footer'>
            显示信息
            <a href='http://untitled-life.github.io/blog/2018/12/27/wide-vs-narrow-dependencies/'><a href="http://untitled-life.github.io/blog/2018/12/27/wide-vs-narrow-dependencies/">http://untitled-life.github.io/blog/2018/12/27/wide-vs-narrow-dependencies/</a></a><br/>
            written by <a href='http://untitled-life.github.io'>Mike Cao</a>
            &nbsp;posted at <a href='http://untitled-life.github.io'><a href="http://untitled-life.github.io">http://untitled-life.github.io</a></a>
            </p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flink Forward China 2018 Slides]]></title>
    <link href="http://untitled-life.github.io/blog/2018/12/23/flink-forward-china-2018-slides/"/>
    <updated>2018-12-23T11:06:47+08:00</updated>
    <id>http://untitled-life.github.io/blog/2018/12/23/flink-forward-china-2018-slides</id>
    <content type="html"><![CDATA[<blockquote><p>人生由淡淡的悲伤和淡淡的幸福组成，在小小的期待、偶尔的兴奋和沉默的失望中度过每一天，然后带着一种想说却又说不出来的‘懂’，作最后的转身离开。 &ndash;龙应台 《目送》</p></blockquote>

<!-- more -->


<h1>主会场</h1>

<ol>
<li>【主会场01-Craig Russell】Apache Flink: 践行 Apache 之道：<a href="https://files.alicdn.com/tpsservice/b40e46ca0abcef3e3f12f7fe12c46f0a.pdf">https://files.alicdn.com/tpsservice/b40e46ca0abcef3e3f12f7fe12c46f0a.pdf</a></li>
<li>【主会场02-周靖人】云上计算普惠科技：<a href="https://files.alicdn.com/tpsservice/9a90a15cc2666348aa7e2fef4846eea7.pdf">https://files.alicdn.com/tpsservice/9a90a15cc2666348aa7e2fef4846eea7.pdf</a></li>
<li>【主会场03-蒋晓伟】Apache Flink® - Redefining Computation：<a href="https://files.alicdn.com/tpsservice/62fa5ebcd23ea0b8a956f2a06197b57a.pdf">https://files.alicdn.com/tpsservice/62fa5ebcd23ea0b8a956f2a06197b57a.pdf</a></li>
<li>【主会场04-Stephan Ewen】Stream Processing takes on Everything：【Updating&hellip;】</li>
<li>【主会场05-闵万里】城市级实时计算的力量：<a href="https://files.alicdn.com/tpsservice/5f3272c3212b77cd835ff020d9954480.pdf">https://files.alicdn.com/tpsservice/5f3272c3212b77cd835ff020d9954480.pdf</a></li>
<li>【主会场06-罗李】滴滴实时计算平台架构与实践：<a href="https://files.alicdn.com/tpsservice/aca017af879a657ed0983b8f1cf4bbfd.pdf">https://files.alicdn.com/tpsservice/aca017af879a657ed0983b8f1cf4bbfd.pdf</a></li>
</ol>


<h1>分会场一</h1>

<ol>
<li>【分会场一01-钱正平】为并行图数据处理提供高层抽象／语言：<a href="https://files.alicdn.com/tpsservice/1f9799e34cd9ce22678b1ed13b71e615.pdf">https://files.alicdn.com/tpsservice/1f9799e34cd9ce22678b1ed13b71e615.pdf</a></li>
<li>【分会场一02-秦江杰 / 孙金城】Simplify Machine Learning With Flink TableAPI：<a href="https://files.alicdn.com/tpsservice/69181d1fd85d15635a7fe64ebafbf140.pdf">https://files.alicdn.com/tpsservice/69181d1fd85d15635a7fe64ebafbf140.pdf</a></li>
<li>【分会场一03-时金魁】Flink七武器及应用实战：<a href="https://files.alicdn.com/tpsservice/4346f13e6710d3faed35fa21976ce1cb.pdf">https://files.alicdn.com/tpsservice/4346f13e6710d3faed35fa21976ce1cb.pdf</a></li>
<li>【分会场一04-崔星灿】快速融入Apache Flink开源社区：<a href="https://files.alicdn.com/tpsservice/981cfe593809cc08c11c5f0cee4d19cd.pdf">https://files.alicdn.com/tpsservice/981cfe593809cc08c11c5f0cee4d19cd.pdf</a></li>
<li>【分会场一05-施晓罡 / 郑灿彬】基于Apache Flink的平台化构建及运维优化经验：<a href="https://files.alicdn.com/tpsservice/9bcc469feb3dcca4ea15226e70e23ed5.pdf">https://files.alicdn.com/tpsservice/9bcc469feb3dcca4ea15226e70e23ed5.pdf</a></li>
</ol>


<h1>分会场二</h1>

<ol>
<li>【分会场二01-Radu Tudoran】Real-Time AI in Huawei Cloud: Practicing with Streaming ML：<a href="https://files.alicdn.com/tpsservice/3d836d6366a800dc70f52a0ec0bb5bc5.pdf">https://files.alicdn.com/tpsservice/3d836d6366a800dc70f52a0ec0bb5bc5.pdf</a></li>
<li>【分会场二02-Konstantin Knauf】Apache Flink® 1.7 and Beyond：【Updating&hellip;】</li>
<li>【分会场二03-李峰】FLINK在大规模实时无效广告流量检测中的应用：<a href="https://files.alicdn.com/tpsservice/c429c9351675f89a56000489519135a8.pdf">https://files.alicdn.com/tpsservice/c429c9351675f89a56000489519135a8.pdf</a></li>
<li>【分会场二04-Piotr Nowojsk】Flink Streaming SQL 2018：【Updating&hellip;】</li>
<li>【分会场二05-孟文瑞 / 于淼】Uber 商业性能指标生成与管理：<a href="https://files.alicdn.com/tpsservice/9bf841f251392aedcbb7cc98c5d140fa.pdf">https://files.alicdn.com/tpsservice/9bf841f251392aedcbb7cc98c5d140fa.pdf</a></li>
<li>【分会场二06-戴资力】Apache Flink 流式应用中状态的数据结构定义升级：【Updating&hellip;】</li>
</ol>


<h1>分会场三</h1>

<ol>
<li>【分会场三01-邹丹】Flink在字节跳动的实践：<a href="https://files.alicdn.com/tpsservice/6b7686e18135389a76e2a0e476b270ec.pdf">https://files.alicdn.com/tpsservice/6b7686e18135389a76e2a0e476b270ec.pdf</a></li>
<li>【分会场三02-鞠⼤升】基于Flink的美团点评实时计算平台实践和应⽤：<a href="https://files.alicdn.com/tpsservice/d855dadbdeacb1d7bae82c2780a545b5.pdf">https://files.alicdn.com/tpsservice/d855dadbdeacb1d7bae82c2780a545b5.pdf</a></li>
<li>【分会场三03-杨克特 / 伍翀】基于streaming构建统一的数据处理引擎的挑战与实践：<a href="https://files.alicdn.com/tpsservice/74235d95df4b7b3163a96615e0b61131.pdf">https://files.alicdn.com/tpsservice/74235d95df4b7b3163a96615e0b61131.pdf</a></li>
<li>【分会场三05-李钰 / 唐云】Flink中的两类新型状态存储：<a href="https://files.alicdn.com/tpsservice/1df9ccb8a7b6b2782a558d3c32d40c19.pdf">https://files.alicdn.com/tpsservice/1df9ccb8a7b6b2782a558d3c32d40c19.pdf</a></li>
</ol>


<h1>分会场四</h1>

<ol>
<li>【分会场四01-王绍翾 / 章剑锋】Challenges and Opportunities of Apache Flink® Ecosystem：<a href="https://files.alicdn.com/tpsservice/6122ed352e520aae78a22ed19657d150.pdf">https://files.alicdn.com/tpsservice/6122ed352e520aae78a22ed19657d150.pdf</a></li>
<li>【分会场四02-翟佳 / 郭斯杰】使⽤Flink和Pulsar进⾏批流⼀体弹性计算：<a href="https://files.alicdn.com/tpsservice/36a600d88492560d8f33c86ce9e3f746.pdf">https://files.alicdn.com/tpsservice/36a600d88492560d8f33c86ce9e3f746.pdf</a></li>
<li>【分会场四03-滕昱】为流处理世界重新设计的存储：<a href="https://files.alicdn.com/tpsservice/8c72901db4a4bda83e33d35b8e6d0ecd.pdf">https://files.alicdn.com/tpsservice/8c72901db4a4bda83e33d35b8e6d0ecd.pdf</a></li>
<li>【分会场三04-杨旭】Alink：基于Apache Flink的算法平台：<a href="https://files.alicdn.com/tpsservice/23c67b6682c7d74339af7c53fccac429.pdf">https://files.alicdn.com/tpsservice/23c67b6682c7d74339af7c53fccac429.pdf</a></li>
<li>【分会场四06-徐骁】Apache Flink 和 Elasticsearch 助⼒实时 OLAP 平台：<a href="https://files.alicdn.com/tpsservice/44558decf0f39980283107647d1e5755.pdf">https://files.alicdn.com/tpsservice/44558decf0f39980283107647d1e5755.pdf</a></li>
</ol>


<h1>分会场五</h1>

<ol>
<li>【分会场五01-姜春宇】以标准推动开源技术在行业的落地：<a href="https://files.alicdn.com/tpsservice/13039399808974a7c40be0c5d671061e.pdf">https://files.alicdn.com/tpsservice/13039399808974a7c40be0c5d671061e.pdf</a></li>
<li>【分会场五03-陈华曦】基于Apache Flink的搜索处理平台：<a href="https://files.alicdn.com/tpsservice/8dab3c208f8044a26937a7bd7aed3c3d.pdf">https://files.alicdn.com/tpsservice/8dab3c208f8044a26937a7bd7aed3c3d.pdf</a></li>
<li>【分会场五05-倪春恩】Apache Kylin:大数据OLAP利器：<a href="https://files.alicdn.com/tpsservice/4a21d431d914e85b0edced063dbc40ff.pdf">https://files.alicdn.com/tpsservice/4a21d431d914e85b0edced063dbc40ff.pdf</a></li>
<li>【分会场五06-李剑】Flink在阿里巴巴电商业务中的应用：<a href="https://files.alicdn.com/tpsservice/badd0c8d32c9008d95addc0a28f1eb11.pdf">https://files.alicdn.com/tpsservice/badd0c8d32c9008d95addc0a28f1eb11.pdf</a><p class='post-footer'>
         显示信息
         <a href='http://untitled-life.github.io/blog/2018/12/23/flink-forward-china-2018-slides/'><a href="http://untitled-life.github.io/blog/2018/12/23/flink-forward-china-2018-slides/">http://untitled-life.github.io/blog/2018/12/23/flink-forward-china-2018-slides/</a></a><br/>
         written by <a href='http://untitled-life.github.io'>Mike Cao</a>
         &nbsp;posted at <a href='http://untitled-life.github.io'><a href="http://untitled-life.github.io">http://untitled-life.github.io</a></a>
         </p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何用沟通解决80%的工作问题?(转载)]]></title>
    <link href="http://untitled-life.github.io/blog/2018/12/11/how-to-solve-80-percent-of-work-problems-with-communication/"/>
    <updated>2018-12-11T15:07:56+08:00</updated>
    <id>http://untitled-life.github.io/blog/2018/12/11/how-to-solve-80-percent-of-work-problems-with-communication</id>
    <content type="html"><![CDATA[<blockquote><p>爱，不等于喜欢，爱，不等于认识。爱，其实是很多不喜欢，不认识，不沟通的借口。因为爱，所以正常的沟通也不必了。 虽然心中有爱，但是爱，冻结在经年累月的沉默里，好像藏着一个疼痛的伤口，没有纱布可绑。 多少父母和儿女同处一室却无话可谈，他们深爱着彼此却互不认识，他们向往接触却找不到桥梁，渴望表达却没有语言。 &ndash;龙应台 《亲爱的安德烈》</p></blockquote>

<!-- more -->


<p>原文地址：<a href="https://mp.weixin.qq.com/s/Bpt4cIChMtl4GwcQ_fMAgw">https://mp.weixin.qq.com/s/Bpt4cIChMtl4GwcQ_fMAgw</a></p>

<p>我曾经说过，工作中80%的问题都是沟通造成的。绝大部分工作问题，不来自于技能本身，而来自于沟通。</p>

<p><strong>沟通的本质，不是你说了什么，而是别人听懂了什么</strong>。但问题是，你怎么确认对方听懂了？<strong>沟通真的太难了</strong>。</p>

<p>后来，我慢慢发现，沟通之难，主要源于几个客观存在的基本事实：</p>

<h1>沟通困难的三个基本事实</h1>

<h2>沟通困难的第一个基本事实：每个人脑海里的信息储备完全不同</h2>

<p>我最近研读了几本脑科学书籍，突然意识到：<strong>智商需要重新被定义。智商可能更多是对人的一部分脑力的发掘。相比动物，人脑的可塑性更强</strong>。</p>

<p>但这种可塑性会造成什么问题呢？每个人由于大脑信息储备和处理能力不同，造成大脑塑造结果的巨大差异。<strong>一人一世界</strong>。不同专业背景、不同职位、不同的成长环境，使得每个人在知识储备、理解力、思考模式上迥异。</p>

<p>我曾经一度认为自己的沟通还不错，直到做机器人后，遇到了有史以来最大的意见争执。我发现，想要与行业背景不同的人达成一致，非常困难。而这种困难本质上源于各自知识储备的差异及由此形成的思维模式差异，最后造成极大的沟通成本。</p>

<p>这种争论本质上都源于各自知识储备的差异及由此形成的思维模式差异，最后造成极大的沟通成本。</p>

<h2>沟通困难的第二个基本事实：语言传输是有损压缩的</h2>

<p><strong>文字是一种很了不起的语言，它将信息压缩到极小的、可反复被传播的载体，极大地提高了沟通的效率和信息的传播范围，并且得以让人类实现协作，建立共识。</strong></p>

<p>但文字流承载的信息，极其有限。更重要的事实在于，当双方进行沟通时，说出的任何一段语言，经过压缩后再还原，即信息的处理和接收，又开始依赖于各自的信息储备。</p>

<p><strong>整个信息从压缩到解压的过程，一定会有损耗。</strong></p>

<p>同样一个词，放在不同的语言体系，一经压缩传递，意思变化差之毫厘，谬以千里。最怕的就是形容词。不同人看，理解不一样。你觉得的“很多”，在我看来可能就一点点。</p>

<h2>沟通困难的第三个基本事实：人太容易进入以自我为中心的思考模式</h2>

<p>每个人都很容易进入以自我为中心的思考模式。这里体现为四种心态：</p>

<p><strong>第一种心态：“默认对方是自己肚子里的蛔虫，你就该懂</strong>。”别人如果不懂，就懒得沟通。</p>

<p><strong>第二种心态，“这你应该懂啊，我讲这么清楚你怎么就不懂</strong>?或许，别人只是恰巧比你少参加了一次会而已。</p>

<p><strong>第三种心态更可怕，叫“自尊（自卑）心态”，即“你不理我，我也不理你，我凭什么要找你沟通</strong>？”大部分人都折在这种心态了，不经过思考，直接把问题归结于对方。</p>

<p><strong>第四种心态，叫道德制高点</strong>。很多人跟我说，“我什么都不图，就图公司能更好”；“我就是想把这件事做好，所以，你们应该理解我”；“我很简单很纯粹，所以这个事儿一定是你们有问题。”</p>

<p>其实，每个人都有自己的诉求。我们不能简单地用出发点或心理优越感，代替沟通本身的问题。如果没有意识到问题的内核，就容易回避沟通能力不足的问题。回避，意味着不敢直面问题，也意味着问题始终存在。</p>

<h1>树立沟通大原则-你必须知道的七个沟通基本原则</h1>

<p>如何避免沟通中的这些问题？我认为，沟通前，我们需要为自己树立一些沟通的基本原则。我根据自己的经验和观察总结了以下几条：</p>

<h2>沟通原则1：信息尽量透明</h2>

<p>一个好的企业，一定要在内部做到信息透明，这样做最大的好处就是降低沟通成本。</p>

<p>谷歌允许每个员工去查代码，facebook允许每个人可以去查别人的目标，我也花了很大力气督促OA建设，目的都是为了信息透明。</p>

<p>有人会说，商业机密不会泄露吗？如果你想泄密，就一定有办法。但从概率上去判断，哪件事的损失更大呢？我想，答案很清楚。</p>

<h2>沟通原则2：多倾听，理解对方要表达的</h2>

<p>看一个人会不会沟通，就看他打断别人的次数、从他听人讲话的状态，就可以辨别。</p>

<p>大部分人不具备倾听的能力。因为一个人的语言输入效率只占用大脑的20%，冗余的80%经常会被很多人用来走神，玩手机或交头接耳等等。听别人讲话的人很多，但拥有倾听能力的人很少。</p>

<p><strong>倾听的本质其实是让你的大脑高负荷运转，同时顺着主讲人的主线进入别人的世界，理解别人为什么这么讲。拥有这样的能力，绝非易事，必须刻意训练</strong>。</p>

<h2>沟通原则3：表述时zoom in和zoom out结合，要有框架描述</h2>

<p>表述时要zoom in（意指细节描述）和zoom out（意指宏观概括）结合，要有框架描述。最怕的是指令型的命令。</p>

<p>所谓框架描述，即要有战略意图的描述，也要有目标的拆解；不要用形容词，描述越具体、越清晰越好。</p>

<h2>沟通原则4：把沟通本身作为问题，不作立场假设</h2>

<p>当我们与别人一起协作，面对结果和预期不一致时，首先应该思考：双方沟通不到位，而不是“对方就是不干活，跟我对着干”。</p>

<p>每个人都有做事的驱动力，但我们必须承认：人都是懒惰的，都有理解能力的局限。不要轻易去怀疑别人的立场。一旦进入立场假设，中间的过程就容易被忽略。</p>

<h2>沟通原则5：沟通技巧本身是学问，可以不断提升</h2>

<p>沟通技巧是一门学问，技巧的核心是要高度重视沟通形式。</p>

<p>电子邮件或微信，不能作为沟通手段，最多作为一种信息的备忘手段。发邮件或微信，不是在沟通，而是在下达指令。更何况，这样的指令，或许别人没看到。</p>

<p>再者，你是否真有能力，在邮件或微信里，用几行字把问题解释清楚，把诉求阐述明白？最好的方式就是面对面。</p>

<h2>沟通原则6：面对面沟通，效率最高</h2>

<p>我们每天可能有很多会议，但大多数会议效率很低。有时候大家开会，不过是为了刷存在感，为了表达自己在努力工作，并不是为了解决沟通中的问题。</p>

<p>如果问题很紧急，很重要，最好的方式是直接选择面对面沟通。面对面沟通之前，首先做好充分准备；其次带着问题来；最后，做好会议纪要。如此，效率最高。</p>

<h2>沟通原则7：有反馈的沟通，才是有效沟通</h2>

<p>当你完成一次沟通后，要想办法去拿到别人的反馈。其实就是别人到底听懂了什么。</p>

<p>这样的反馈，不是拍胸脯说，我懂了。而是沟通完后，他做了一份文档，甚至把刚才沟通的事再讲一遍。本质就是促使他花时间去思考，整理思路，最终将沟通结果做出来。</p>

<p>以上都是一些比较基本的沟通大原则。但沟通是一个系统工程，要想做到高效沟通，在具体的实际运用中，我们还有很多需要刻意训练的思维和技巧。</p>

<p>如何做到高效沟通呢？我从三个维度分别给出解决方案。即做好向下沟通、同级沟通和向上沟通：</p>

<h1>如何高效沟通？之向下沟通</h1>

<p>首先，分享一个网上的段子：</p>

<blockquote><p>吃中饭的时候，谷歌CEO说：“我想买摩托罗拉手机”。
吃晚饭的时候，下属说：“老大，我已经帮你买下来了。”
CEO问：“哦？哪个型号啊？”
下属问：“……买下来了，30亿美金……”</p></blockquote>

<p>这是上下级之间沟通经常出现的问题。实际工作中，如果上级只是简单的指令表达，在下级的眼里，则完全是另一个词汇。</p>

<p>当你是一名干部，或者作为管理者，向下沟通是非常重要的工作，有几个点比较重要：</p>

<h2>1.给予底层信任：充分理解下级的成长诉求</h2>

<p>我刚参加工作不久，带着几个人做360安全卫士，资源有限，招不到人，公司极度不重视，为了调动积极性，我当时总结了一套努力工作的方法。其实，<strong>核心就是不断理解下属的诉求</strong>。</p>

<p>虽然那时工资较低，但我告诉他们，至少我能保证你们每一天都在进步，我们可以把工作看成另类的大学。</p>

<p><strong>所有沟通都是为了成长</strong>。这个阶段，底层员工既想成长，又迷茫，某种意义上，他们的上级就是一个传道授业解惑的职场老师。</p>

<h2>2.传达战略理解：传递公司高层战略和意图</h2>

<p>猎豹发展到今天，这么多年，我始终坚持开放每周公司例会的分享，就是为了让基层员工也能获得最新信息，理解公司的战略和意图。</p>

<p>这样的传达非常重要。当你把整个公司背景传达给下属后，就是让整个组织效能最大化，让所做的事情事半功倍。</p>

<h2>3.真正达成共识：把对方当成参与者，而不是简单的执行者；不是简单的下命令，而是充分描述项目框架和具体目标，形成讨论</h2>

<p>表达意见的核心是为了达成共识。当大家都说出自己的想法，彼此才能相互理解；只有真正理解之后，才有机会达成共识。</p>

<p>我最常说的一句话叫：<strong>多说，婆婆嘴</strong>。一件事要反复说，一个公司战略要在不同场合，不同部分，来回说。</p>

<p>人都有遗忘曲线，没有人会天天思考这些问题。婆婆嘴的一个核心就是要反复多次检查，且检查要密集。<strong>沟通要获得具体清晰的正反馈，而不是相信拍胸脯</strong>。</p>

<h2>4.指出问题时，不作定性描述，只描述具体事情</h2>

<p>什么叫定性描述？定性描述就是“XXX，你没有责任心”，描述具体事情就是“XXX，上周六发生了突发事件，可你邮件微信都不回”。这些话一旦说出来，他没法反驳。如果你说别人没责任心，没人会承认。</p>

<p><strong>不要用形容词，也不要去定性，否则对方很容易产生对抗情绪，一旦对抗，沟通就很难进行下去</strong>。</p>

<p>很多管理者喜欢做酒肉朋友，以后我罩着你之类，这对下属的成长非常不利。你一定要明白，沟通的本质是帮助他完成最底层的成长诉求。很多人跟着一个领导好几年，部门不出绩效，大家也都没有成长，最后其实浪费的是自己的时间。</p>

<p>作为一个管理者，向下沟通的核心就是：<strong>是否愿意花时间去理解下属的成长诉求，去发掘他的成长路径，帮助下属树立一个好的职场成长观，帮助他与自我的一些弱点对抗等等，这都是向下沟通的关键之所在</strong>。</p>

<h1>如何高效沟通？之同级沟通</h1>

<p>说完向下沟通，再来说同级沟通。作为管理者，向下沟通的坎，较为容易迈过。面对同级时，反而最容易产生沟通的问题。</p>

<p>同级沟通中，最典型的一个思维陷阱就是——<strong>总有奸臣想害朕。这句话就是一个完全自我为中心的思维状态</strong>。</p>

<p>我见过很多人的思维模式，容易“同行相轻”，瞧不起同级——这帮人太low，我怎么沦落到跟他一起工作，或者，他太复杂，动不动就挑拨离间，向老板献媚等等。</p>

<p>面对同级，总是一种居高临下的视角。这样的视角，非常非常要命。</p>

<p>如何才能做好与你同级同事之间的沟通呢？我认为以下几点，比较重要：</p>

<h2>1.理解人欲，理性平等看待对方的诉求</h2>

<p>雷军说过一句话，到了四十岁后，有一个重大的感悟就叫“人欲即天理”。每个人有一些诉求，都是正常的。无所谓谁比谁更高级，要平等理性地看待对方。</p>

<p>不要本末倒置，把沟通当作核心，沟通只是手段，而要把目标作为核心诉求。当你用目标去驱动自己的沟通时，你就会更好地理解别人，理解沟通的目的。</p>

<h2>2.坦诚表达具体问题，不作暗示</h2>

<p>任何一种沟通，都会触发内心的情绪，导致大多数人很难客观理智地面对沟通。</p>

<p>当你觉得不满，要直接讲，讲的过程中，可能有一些铺垫，但最终可以发现问题。不要去作暗示，效率太低。</p>

<p><strong>坦诚是一种力量，让沟通变得更高效，且能跟组织目标集合</strong>。我们不用把别人想得很脆弱，担心说这个话，他就跟我闹掰了，退一步讲，如果他跟你闹掰了，说实话，这人的确不值得你交。</p>

<p>更严重一点，我曾经是鼓励下属去吵架的，当然得就事论事，不准人身攻击。有的时候，冲突或者讨论的激烈，并不是什么坏事情。要相信，对方是成年人。如果说两句就玻璃心，可能我们选拔他就是有问题的。</p>

<h2>3.不作立场假设，控制情绪，只解决沟通问题本身</h2>

<p>当我们在沟通时，一旦沟通遇阻，或者对方有反对意见，就会作立场假设，甚至妄意揣测对方动机。这些做法都是非常低效的。</p>

<p><strong>沟通的核心点就是要控制情绪，理性表达，多讲具体问题</strong>。当具体问题讲多了，大家理解了，自然就变成框架性问题。解决沟通问题本身才是目标，而不是立场假设，作无用功。</p>

<h1>如何高效沟通？之向上沟通</h1>

<p>最后说一下向上沟通。大部分人，都 太不重视与老板的沟通，甚至是退缩，逃避，不沟通。</p>

<p>向上沟通中，最常见的一种自我开脱的理由就是——<strong>老板太忙了</strong>！</p>

<p>首先，理解一下老板是个什么物种。老<strong>板不是一个单纯的人的一个存在，更多是一个职位的存在</strong>。在工作场合，所谓老板，不管是CEO或部门管理者，如果他越优秀，就越不应该是一个人格意义上的人，而是一个职位意义上的人。</p>

<p><strong>那么，老板到底是一个什么样的物种呢</strong>？</p>

<p><strong>第一，他未必比你聪明，但一般情况下，他的见识和判断比你强</strong>。他的信息渠道优于你，信息质量和数量超过你，犯的错误也比你多，应付过的复杂考验，见过的大场面可能也比你多。</p>

<p><strong>第二，你的老板会犯错，但他做对的概率比你大</strong>。你没有到他的层级，你很难想象他拿到的信息和判断的依据。从对的概率来说，他做出正确判断的概率肯定比你大。</p>

<p><strong>第三，他很忙，但重要的事情他比你更有时间</strong>。每个人都天生认为自己很重要。如果你觉得老板不理你，可能是你表达的东西，他认为不重要，或者你没有让他觉得重要。这还是沟通的问题。</p>

<p><strong>第四，他的职位要求比你高，所以你认为的重要感受，他往往不在意</strong>。经常会有人说，你怎么不理解我。我说你理解我吗？你那点小委屈在我面前光哭诉就要半小时，我哪有那么多时间？所以要找到核心点，不要上来就讲感受，要反向理解。</p>

<p><strong>第五，他也不是神，很多情况他不知道。最好的办法就是把问题讲出来</strong>。有人可能会想，讲出来后，我不成了搬弄是非吗？你倒是想搬弄是非，但你有这能力吗？你也太低估老板的判断力了。不要忌讳说问题。你把信息告诉他后，他自有自己的判断力。</p>

<p><strong>第六，他是资源的汇聚，说服他就能充分放大你的能量</strong>。最大的核心点就是——老板本质上是个资源的汇聚体。你说服他，你的能量可以放大好多倍。</p>

<p>当然，如果你认为放大能量不重要，只想安静地做一个佛系员工，那么你在公司体系下很难做出有效输出。</p>

<p>理解了老板是一个什么样的物种后，具体到沟通，应该怎么做呢？我总结了几点：</p>

<h2>1.老板说的要充分理解，因为可能让你学到更多</h2>

<p>老板对你完成个人目标和个人成长特别有好处。这是一个现实，没什么好抱怨的。他说的话，你真的要充分理解。他的信息和见识一定远远大于绝大部分员工。</p>

<h2>2.不要用简单的战术问题去和老板的战略意图作对抗</h2>

<p>每个一线员工，肯定有更多的细节执行的知识，这样的知识，老板一定不知道。如果你拿着这些来反驳老板，就会陷入两个不同层级的讨论，这样的讨论得不出有效结果。</p>

<p>你应该反过来理解——他为什么这么说？他的意图是什么？他看到了什么趋势？我怎么去消化掉？</p>

<p>还是那句话，他的信息量比你大，你要坚信，他有更大概率做出比你更强的判断。</p>

<h2>3.放弃封建主义的君臣思想，认为小人才献媚，清者自清</h2>

<p>这一点很重要。即使在古代，皇帝与大臣之间也是有沟通的，只不过载体是奏折。没有沟通，就没有相互理解。<strong>如果指望只要做好事情就能被发现，就是没理解什么叫沟通</strong>。</p>

<p>中国人的沟通能力是非常弱的，大家都喜欢推崇一种所谓只可意会不可言传。其实不沟通，都会出问题。</p>

<p>经常有人说，会哭的孩子有奶喝。但凭什么你就不会哭呢？其实会哭，也是表达自己的一种能力。如果你连表达自己都不会，何谈在公司里好好干活呢？你宅在家里就行了。</p>

<p>有些人会说清者自清，我不想说，不方便说，不好说，一说就成了搬弄是非的人。还是那句话，你想当小人，哪有那么容易啊？老板是会综合所有信息，一起观察，做判断的人。而你，其实也是老板很重要的调查渠道之一。</p>

<p><strong>在沟通中，说具体问题是最关键的，老板有他的判断力</strong>。如果不能面对具体问题，不管是老板，还是你的同事，甚至下属，这样的人，都不可交。</p>

<h2>4.说服老板不容易，但很值得，要多花时间</h2>

<p>当你把老板看成一个资源体时，他能有时间和你交流，非常非常难得。很多时候，可能就是几句话，就能解决你的很多问题。</p>

<p>想想，巴菲特午餐为啥卖那么贵，其实核心就是他的话有着更大的信息量。对一个拥有一定资产的人来说，听他的几句话，就可能带来一个很大的撬动作用。</p>

<h1>写在最后</h1>

<p>回顾过去几年，我一直在思考人的成长，队伍的成长，也在反思——猎豹是否真的在哪个方向或战略上出问题了吗？其实没有。但我认为，实际的执行还是有偏差的，出现了一些问题，而这些问题的本质大多是沟通造成的。</p>

<p><strong>沟通的目的，其实是让所有人的认知和目标实现统一</strong>。这是最难的，也是最重要的。然而，太多人过于简单、粗糙地理解沟通本身。</p>

<p><strong>太多人低估沟通对自我能力的塑造作用</strong>。当你认为别人可以获得更多资源，一定不要简单为：他比我能讲，比我多跟老板干了几年;其实不是，本质他可能整个逻辑思路更强、更清晰、更懂得沟通。</p>

<p>我们一定要意识到——<strong>沟通是一种能力，它并不天然的，而是可以被刻意训练、被学习、被精进的能力</strong>。只有如此，你的成长，才可能真正上一个大台阶。<p class='post-footer'>
            显示信息
            <a href='http://untitled-life.github.io/blog/2018/12/11/how-to-solve-80-percent-of-work-problems-with-communication/'><a href="http://untitled-life.github.io/blog/2018/12/11/how-to-solve-80-percent-of-work-problems-with-communication/">http://untitled-life.github.io/blog/2018/12/11/how-to-solve-80-percent-of-work-problems-with-communication/</a></a><br/>
            written by <a href='http://untitled-life.github.io'>Mike Cao</a>
            &nbsp;posted at <a href='http://untitled-life.github.io'><a href="http://untitled-life.github.io">http://untitled-life.github.io</a></a>
            </p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[API Gateway]]></title>
    <link href="http://untitled-life.github.io/blog/2018/12/07/api-gateway/"/>
    <updated>2018-12-07T09:39:31+08:00</updated>
    <id>http://untitled-life.github.io/blog/2018/12/07/api-gateway</id>
    <content type="html"><![CDATA[<blockquote><p>有一种寂寞，身边添一个可谈的人，一条知心的狗，或许就可以消减。有一种寂寞，茫茫天地之间余舟一芥的无边无际无着落，人只能各自孤独面对，素颜修行。 &ndash;龙应台 《目送》</p></blockquote>

<!-- more -->


<h2>Intent</h2>

<p>Aggregate calls to micro services in a single location: the API Gateway. The user makes a single call to the API Gateway, and the API Gateway then calls each relevant micro service.</p>

<h2>Applicability</h2>

<p>you&rsquo;re also using the micro services pattern and need a single point of aggregation for your micro service calls.<p class='post-footer'>
            显示信息
            <a href='http://untitled-life.github.io/blog/2018/12/07/api-gateway/'><a href="http://untitled-life.github.io/blog/2018/12/07/api-gateway/">http://untitled-life.github.io/blog/2018/12/07/api-gateway/</a></a><br/>
            written by <a href='http://untitled-life.github.io'>Mike Cao</a>
            &nbsp;posted at <a href='http://untitled-life.github.io'><a href="http://untitled-life.github.io">http://untitled-life.github.io</a></a>
            </p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Write a Resume]]></title>
    <link href="http://untitled-life.github.io/blog/2018/12/04/how-to-write-a-resume/"/>
    <updated>2018-12-04T14:10:59+08:00</updated>
    <id>http://untitled-life.github.io/blog/2018/12/04/how-to-write-a-resume</id>
    <content type="html"><![CDATA[<blockquote><p>我慢慢地、慢慢地了解到，所谓父女母子一场，只不过意味着，你和他的缘分就是今生今世不断地在目送他的背影渐行渐远。你站在小路的这一端，看着他逐渐消失在小路转弯的地方，而且，他用背影告诉你：不必追。 &ndash;龙应台 《目送》</p></blockquote>

<!-- more -->


<h2>一份规范的简历，要注意这些点</h2>

<ol>
<li>言简意赅，真实自我。包括个人信息（姓名 / 性别 / 年龄 / 手机号码 / 邮箱 / 居住城市足矣）、工作经历（公司 / 时间段 / 职位 / 做了什么 / 取得了什么成绩）、教育背景（学校 / 专业 / 时间段 / 学历）三大部分。</li>
<li>关于「做了什么」，应该具体到「你」做了什么，而不是你从事工种的工作内容。比如，你是一个产品经理，你可以写你负责设计了 XX 小程序的核心用户流程，把用户量从 X 增长到 Y。但是不要写你的工作内容是前期市场调研、需求文档撰写、项目管理、跨部门沟通等通用性的内容。「把简历写成 JD」是很多人常犯的错误。</li>
<li>关于「取得了什么成绩」，如果是可量化的结果，尽量用数据表达。若担心泄露公司机密，可以用同比、环比增长百分比进行体现，既显专业又避免泄密。</li>
<li>你无法确定对方公司的面试官和 HR 用的什么操作系统，是在电脑上还是在外面用手机，因此发送.pdf 格式总是比较保险的（避免出现排版的问题）。</li>
<li>尽量写公司的产品（品牌）名称，不用写工商登记的公司全称，简单明了。比如大部分人知道「美团」，但不知道「北京三快科技有限公司」是哪家公司。</li>
<li>如果你就职的公司不是太有名，可以在简历中提供官方网址，不要让简历阅读者去猜，或者花费时间去搜索。换位思考总是可以带来「用户体验」的提升。</li>
<li>设计师除了简历，要同时准备好自己的作品集，同样要使用 pdf 格式（不要用 png 等图片格式）。如果作品集文件太大，可以提供百度网盘的链接及密码。</li>
<li>如果你是经验不太丰富的产品经理，还没有耳熟能详的产品来证明你的能力，也可提供一些附属链接或资料，体现你的产品设计能力。</li>
</ol>


<h2>简历尽量不要怎么写</h2>

<ol>
<li>不要套用任何市面上的简历模板。写简历是一个 review 自我的好机会，打开一个空白的 word，放空自我，从头开始书写。内容比格式重要，不必拘泥于「格式」。也不要用拉勾、猎聘等网站下载下来的简历投递给不同的公司，没有公司喜欢收到这样的简历，就像没有人喜欢当别人的备胎。</li>
<li>不要用「萌萌哒」网络用语、花花绿绿的颜色，以及一些奇奇怪怪的字体与图画。在字体、字号的选择上，宁可保守，尽量体现成熟又靠谱的一面。</li>
<li>不要在简历上写「本人吃苦耐劳，有责任心，学习能力特别强，分析能力突出，有创新意识」等虚无、没有办法立即证明的内容。你是不是具备这些能力，是通过你过往的工作内容和成绩来证明的，不是靠嘴炮。千万不要幻想简历上写得十全十美，就能增加面试的成功率。</li>
<li>不要有错别字。自己的简历，多看两三遍这个要求不过分吧？</li>
<li>不要将文件命名为「简历.pdf」，应便于对方搜索。</li>
<li>不要使用 .pages 或者图片格式的简历，在不同设备上阅读及其不便。</li>
<li>不管你的工作经历多么丰富，简历都一定不要超过 2 页。并不是说工作 10 年了，简历就要写五六页。要知道，很多 HR 在一份简历上的注意力不会超过 30 秒。</li>
<li>不要将工作经历、项目经历分开写，那需要面试官跳动着对比阅读，很费劲。</li>
<li>不要把学校时获得的那些没有份量的奖项都放上去 —— 如果你工作超过 1 年了。只有应届生实在没什么东西可写时又担心简历不足一页时，才会这样做。</li>
<li>如果曾经参加过一些职业培训，最好提前打听下这个培训机构在行业内的名声及被认可的程度。名声不好且培训后获得的证书含金量不高的，就不要写在简历上了，会成为一个减分项。</li>
<li>不管你长得有多帅 / 多漂亮，面试与相貌无关的岗位，都不建议放照片。</li>
<li>不要一段话内字号不一样大，或是字体不一致，像是从别的地方 copy 过来的。<p class='post-footer'>
        显示信息
        <a href='http://untitled-life.github.io/blog/2018/12/04/how-to-write-a-resume/'><a href="http://untitled-life.github.io/blog/2018/12/04/how-to-write-a-resume/">http://untitled-life.github.io/blog/2018/12/04/how-to-write-a-resume/</a></a><br/>
        written by <a href='http://untitled-life.github.io'>Mike Cao</a>
        &nbsp;posted at <a href='http://untitled-life.github.io'><a href="http://untitled-life.github.io">http://untitled-life.github.io</a></a>
        </p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Boot Return Data With JSON Format]]></title>
    <link href="http://untitled-life.github.io/blog/2018/12/04/spring-boot-return-data-with-json-format/"/>
    <updated>2018-12-04T14:04:56+08:00</updated>
    <id>http://untitled-life.github.io/blog/2018/12/04/spring-boot-return-data-with-json-format</id>
    <content type="html"><![CDATA[<blockquote><p>时间是一只藏在黑暗中的温柔的手，在你一出神一恍惚之间，物走星移。 &ndash;龙应台 《目送》</p></blockquote>

<!-- more -->


<h2>方案一(全局配置)</h2>

<p>在application.properties文件加入如下配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">spring.jackson.date-format</span><span class="o">=</span><span class="s">yyyy-MM-dd HH:mm</span>
</span><span class='line'><span class="na">spring.jackson.time-zone</span><span class="o">=</span><span class="s">GMT+8</span>
</span></code></pre></td></tr></table></div></figure>


<p>在pom中添加如下依赖</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-data-rest<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>{version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>方案二(局部注解配置)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 返回格式化的字符串</span>
</span><span class='line'><span class="nd">@JsonFormat</span><span class="o">(</span><span class="n">timezone</span> <span class="o">=</span> <span class="s">&quot;GMT+8&quot;</span><span class="o">,</span> <span class="n">pattern</span> <span class="o">=</span> <span class="s">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="o">)</span>
</span><span class='line'><span class="c1">// 接收格式化的字符串，转为Date类型对象</span>
</span><span class='line'><span class="nd">@DateTimeFormat</span><span class="o">(</span><span class="n">pattern</span> <span class="o">=</span> <span class="s">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>在pom中添加如下依赖</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>com.fasterxml.jackson.datatype<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>jackson-datatype-joda<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>{version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p class='post-footer'>
            显示信息
            <a href='http://untitled-life.github.io/blog/2018/12/04/spring-boot-return-data-with-json-format/'>http://untitled-life.github.io/blog/2018/12/04/spring-boot-return-data-with-json-format/</a><br/>
            written by <a href='http://untitled-life.github.io'>Mike Cao</a>
            &nbsp;posted at <a href='http://untitled-life.github.io'>http://untitled-life.github.io</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Serialization and Evolution]]></title>
    <link href="http://untitled-life.github.io/blog/2018/11/29/data-serialization-and-evolution/"/>
    <updated>2018-11-29T11:35:43+08:00</updated>
    <id>http://untitled-life.github.io/blog/2018/11/29/data-serialization-and-evolution</id>
    <content type="html"><![CDATA[<p>When sending data over the network or storing it in a file, we need a way to encode the data into bytes. The area of data serialization has a long history, but has evolved quite a bit over the last few years. People started with programming language specific serialization such as Java serialization, which makes consuming the data in other languages inconvenient. People then moved to language agnostic formats such as JSON.</p>

<!-- more -->


<p>However, formats like JSON lack a strictly defined format, which has two significant drawbacks:</p>

<ul>
<li><strong>Data consumers may not understand data producers</strong>: The lack of structure makes consuming data in these formats more challenging because fields can be arbitrarily added or removed, and data can even be corrupted. This drawback becomes more severe the more applications or teams across an organization begin consuming a data feed: if an upstream team can make arbitrary changes to the data format at their discretion, then it becomes very difficult to ensure that all downstream consumers will (continue to) be able to interpret the data. What’s missing is a “contract” (cf. schema below) for data between the producers and the consumers, similar to the contract of an API.</li>
<li><strong>Overhead and verbosity</strong>: They are verbose because field names and type information have to be explicitly represented in the serialized format, despite the fact that are identical across all messages.</li>
</ul>


<p>A few cross-language serialization libraries have emerged that require the data structure to be formally defined by some sort of schemas. These libraries include Avro, Thrift, and Protocol Buffers. The advantage of having a schema is that it clearly specifies the structure, the type and the meaning (through documentation) of the data. With a schema, data can also be encoded more efficiently.</p>

<p>If you don’t know where to start, then we particularly recommend Avro, which is also supported in the Confluent Platform. In the next section we briefly introduce Avro, and how it can be used to support typical schema evolution.</p>

<h2>Avro</h2>

<h3>Defining an Avro Schema</h3>

<p>An Avro schema defines the data structure in a JSON format.</p>

<p>The following is an example Avro schema that specifies a user record with two fields: <code>name</code> and <code>favorite_number</code> of type <code>string</code> and <code>int</code>, respectively.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span><span class="nt">&quot;namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;example.avro&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;record&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="nt">&quot;fields&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>     <span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;favorite_number&quot;</span><span class="p">,</span>  <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;int&quot;</span><span class="p">}</span>
</span><span class='line'> <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then use this Avro schema, for example, to serialize a Java object (POJO) into bytes, and deserialize these bytes back into the Java object.</p>

<p>One of the interesting things about Avro is that it not only requires a schema during data serialization, but also during data deserialization. Because the schema is provided at decoding time, metadata such as the field names don’t have to be explicitly encoded in the data. This makes the binary encoding of Avro data very compact.</p>

<h3>Schema Evolution</h3>

<p>An important aspect of data management is schema evolution. After the initial schema is defined, applications may need to evolve it over time. When this happens, it’s critical for the downstream consumers to be able to handle data encoded with both the old and the new schema seamlessly. This is an area that tends to be overlooked in practice until you run into your first production issues. Without thinking through data management and schema evolution carefully, people often pay a much higher cost later on.</p>

<p>There are three common patterns of schema evolution:</p>

<ul>
<li>backward compatibility</li>
<li>forward compatibility</li>
<li>full compatibility</li>
</ul>


<h3>Backward Compatibility</h3>

<p>Backward compatibility means that data encoded with an older schema can be read with a newer schema.</p>

<p>Consider the case where all the data in Kafka is also loaded into HDFS, and we want to run SQL queries (e.g., using Apache Hive) over all the data. Here, it is important that the same SQl queries continue to work even as the data is undergoing changes over time. To support this kind of use case, we can evolve the schemas in a backward compatible way. Avro has a set of rules on what changes are allowed in the new schema for it to be backward compatible. If all schemas are evolved in a backward compatible way, we can always use the latest schema to query all the data uniformly.</p>

<p>For example, an application can evolve the user schema from the previous section to the following by adding a new field <code>favorite_color</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span><span class="nt">&quot;namespace&quot;</span><span class="p">:</span> <span class="s2">&quot;example.avro&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;record&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="nt">&quot;fields&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>     <span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;name&quot;</span><span class="p">,</span> <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;favorite_number&quot;</span><span class="p">,</span>  <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;int&quot;</span><span class="p">},</span>
</span><span class='line'>     <span class="p">{</span><span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;favorite_color&quot;</span><span class="p">,</span> <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="nt">&quot;default&quot;</span><span class="p">:</span> <span class="s2">&quot;green&quot;</span><span class="p">}</span>
</span><span class='line'> <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the new field <code>favorite_color</code> has the default value “green”. This allows data encoded with the old schema to be read with the new one. The default value specified in the new schema will be used for the missing field when deserializing the data encoded with the old schema. Had the default value been ommitted in the new field, the new schema would not be backward compatible with the old one since it’s not clear what value should be assigned to the new field, which is missing in the old data.</p>

<h3>Forward Compatibility</h3>

<p>Forward compatibility means that data encoded with a newer schema can be read with an older schema.</p>

<p>Consider a use case where a consumer has application logic tied to a particular version of the schema. When the schema evolves, the application logic may not be updated immediately. Therefore, we need to be able to project data with newer schemas onto the (older) schema that the application understands. To support this use case, we can evolve the schemas in a forward compatible way: data encoded with the new schema can be read with the old schema. For example, the new user schema we looked at in the previous section on backward compatibility is also forward compatible with the old one. When projecting data written with the new schema to the old one, the new field is simply dropped. Had the new schema dropped the original field <code>favorite_number</code> (number, not color), it would not be forward compatible with the original user schema since we wouldn’t know how to fill in the value for <code>favorite_number</code> for the new data because the original schema did not specify a default value for that field.</p>

<p>Full Compatibility
Full compatibility means schemas are backward <strong>and</strong> forward compatible.</p>

<p>To support both previous use cases on the same data, we can evolve the schemas in a fully compatible way: old data can be read with the new schema, and new data can also be read with the old schema.<p class='post-footer'>
            显示信息
            <a href='http://untitled-life.github.io/blog/2018/11/29/data-serialization-and-evolution/'><a href="http://untitled-life.github.io/blog/2018/11/29/data-serialization-and-evolution/">http://untitled-life.github.io/blog/2018/11/29/data-serialization-and-evolution/</a></a><br/>
            written by <a href='http://untitled-life.github.io'>Mike Cao</a>
            &nbsp;posted at <a href='http://untitled-life.github.io'><a href="http://untitled-life.github.io">http://untitled-life.github.io</a></a>
            </p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Life]]></title>
    <link href="http://untitled-life.github.io/blog/2018/11/26/hello-life/"/>
    <updated>2018-11-26T14:59:05+08:00</updated>
    <id>http://untitled-life.github.io/blog/2018/11/26/hello-life</id>
    <content type="html"><![CDATA[<ul>
<li>我慢慢地、慢慢地了解到，所谓父女母子一场，只不过意味着，你和他的缘分就是今生今世不断地在目送他的背影渐行渐远。你站在小路的这一端，看着他逐渐消失在小路转弯的地方，而且，他用背影告诉你：不必追。 &ndash;龙应台 《目送》</li>
<li>时间是一只藏在黑暗中的温柔的手，在你一出神一恍惚之间，物走星移。 &ndash;龙应台 《目送》</li>
<li>有些事，只能一个人做。有些关，只能一个人过。有些路啊，只能一个人走。 &ndash;龙应台 《目送》</li>
<li>我们拼命地学习如何成功冲刺一百米，但是没有人教过我们：你跌倒时，怎么跌得有尊严；你的膝盖破得血肉模糊时，怎么清洗伤口、怎么包扎；你一头栽下时，怎么治疗内心淌血的创痛，怎么获得心灵深层的平静；心像玻璃一样碎了一地时，怎么收拾？ &ndash;龙应台 《目送》</li>
<li>所谓了解，就是知道对方心灵最深的地方的痛处，痛在哪里。 &ndash;龙应台 《目送》</li>
<li>有一种寂寞，身边添一个可谈的人，一条知心的狗，或许就可以消减。有一种寂寞，茫茫天地之间余舟一芥的无边无际无着落，人只能各自孤独面对，素颜修行。 &ndash;龙应台 《目送》</li>
<li>有些路，只能一个人走。 &ndash;龙应台 《目送》</li>
<li>爱，不等于喜欢，爱，不等于认识。爱，其实是很多不喜欢，不认识，不沟通的借口。因为爱，所以正常的沟通也不必了。 虽然心中有爱，但是爱，冻结在经年累月的沉默里，好像藏着一个疼痛的伤口，没有纱布可绑。 多少父母和儿女同处一室却无话可谈，他们深爱着彼此却互不认识，他们向往接触却找不到桥梁，渴望表达却没有语言。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>修行的路总是孤独的，因为智慧必然来自孤独。 &ndash;龙应台 《目送》</li>
<li>人生由淡淡的悲伤和淡淡的幸福组成，在小小的期待、偶尔的兴奋和沉默的失望中度过每一天，然后带着一种想说却又说不出来的‘懂’，作最后的转身离开。 &ndash;龙应台 《目送》</li>
<li>太疼的伤口，你不敢去触碰；太深的忧伤，你不敢去安慰；太残酷的残酷，有时候，你不敢去注视。 &ndash;龙应台 《目送》</li>
<li>一个人走路，才是你和风景之间的单独私会。 &ndash;龙应台 《目送》</li>
<li>我也要求你读书用功，不是因为我要你跟别人比成就，而是因为，我希望你将来会拥有选择的权利，选择有意义，有时间的工作，而不是被迫谋生。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>【处世心理】人总要慢慢成熟，将这个浮华的世界看得更清楚，看穿伪装的真实，看清隐匿的虚假，很多原本相信的事便不再相信。但是，要相信，这个世界里美好总要多过阴暗，欢乐总要多过苦难，还有很多事，值得你一如既往的相信。 &ndash;龙应台 《不相信》</li>
<li>一个人固然寂寞，两个人孤灯下无言相对却可以更寂寞。 &ndash;龙应台 《目送》</li>
</ul>


<!-- more -->


<ul>
<li>人总要慢慢成熟，将这个浮华的世界看得更清楚，看穿伪装的真实，看清隐匿的虚假，很多原本相信的事便不再相信。但是，要相信，这个世界里美好总要多过阴暗，欢乐总要多过苦难，还有很多事，值得你一如既往的相信。 &ndash;龙应台 《不相信》</li>
<li>幸福就是，生活中不必时时恐惧。幸福就是，寻常的人儿依旧。幸福就是，早上挥手说“再见”的人，晚上又平平常常地回来了，书包丢在同一个角落，臭球鞋塞在同一张椅下。 &ndash;龙应台 《目送》</li>
<li>孩子，我要求你读书用功，不是因为我要你跟别人比成绩，而是因为，我希望你将来会拥有选择的权利，选择有意义、有时间的工作，而不是被迫谋生。当你的工作在你心中有意义，你就有成就感。当你的工作给你时间，不剥夺你的生活，你就有尊严。成就感和尊严，给你快乐。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>我们都知道了，母亲要回的”家“，不是任何一个有邮递区号、邮差找得到的家，她要回的”家“，不是空间，而是一段时光。 &ndash;龙应台 《目送》</li>
<li>沙上有印，风中有音，光中有影。 &ndash;龙应台</li>
<li>我慢慢地、慢慢地了解到，所谓父女母子一场，只不过意味着，你和他的缘分就是今生今世不断地在目送他的背影渐行渐远。 &ndash;龙应台 《目送》</li>
<li>所谓父母，就是那不断对着背影既欣喜又悲伤，想追回拥抱又不敢声张的人。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>我的人生里没有那么多时间与精力去揣测别人对我的看法与评价；该做的事太多了。 &ndash;龙应台 《野火集》</li>
<li>时光，是停留还是不停留？记忆，是长的还是短的？一条河里的水，是新的还是旧的？每一片繁花似锦，轮回过几次？ &ndash;龙应台 《目送》</li>
<li>要真正的注视，必须一个人走路。一个人走路，才是你和风景之间的单独私会。 &ndash;龙应台 《目送》</li>
<li>很多时候不是我们去看父母的背影，而是承受他们追逐的目光，承受他们不舍的，不放心的，满眼的目送。最后才渐渐明白，这个世界上，再也没有任何人，可以像父母一样，爱我如生命 。 &ndash;龙应台</li>
<li>回忆真的是一道泄洪的闸门，一旦打开，奔腾的水势慢不下来。 &ndash;龙应台 《目送》</li>
<li>贫穷的记忆，在事过境迁之后，像黑白片一样，可能产生一种烟尘朦胧的美感，转化为辛酸而甜美的回忆。 &ndash;龙应台 《目送》</li>
<li>幸福就是：生活中不必时时恐惧。 &ndash;龙应台 《目送》</li>
<li>你需要的伴侣，最好是那能够和你并肩立在船头，浅斟低唱两岸风光，同时更能在惊涛骇浪中紧紧握住你的手不放的人。换句话说，最好她本身不是你必须应付的惊涛骇浪。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>母亲，是个最高档的全职、全方位CEO，只是没人给薪水而已。 &ndash;龙应台 《目送》</li>
<li>人生其实就像一条宽阔的平原走进森林的路，在平原上，同伴可以结伴而行，欢乐的前推后挤，相濡以沫，一旦进入森林，草丛和荆棘挡路，各人专心走各人的路，寻找各人的方向，那推推挤挤的情感，那无忧无虑无猜忌的同侪深情，在人的一生中也只有少年拥有。离开这段纯洁而明亮的阶段，路可以愈走愈孤独。 &ndash;龙应台</li>
<li>思想需要经验的积累，灵感需要孤独的沉淀，最细致的体验需要最宁静透彻的观照。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>凡是出于爱的急切都是可以原谅的。 &ndash;龙应台 《目送》</li>
<li>人生就是如此，你以为已经从一个漩涡逃离，其实另外一个漩涡就在你的脚下。用力蹬一脚，就进去了。所以，不需要对生活太用力，心会带着我们去该去的地方。 &ndash;龙应台</li>
<li>他的坐着，其实是奔波，他的热闹，其实是孤独。 &ndash;龙应台</li>
<li>拜祭，终究也只是生者的一份安宁。 &ndash;龙应台 《目送》</li>
<li>不是渐行渐远，而是有一天终要重逢。 &ndash;龙应台 《目送》</li>
<li>冬夜的街，很黑，犬吠声自远处幽幽传来，听起来像低声呜咽，在解释一个说不清的痛处。 &ndash;龙应台 《目送》</li>
<li>”你不用道歉，我明白我不是你最重要的一部分。那个阶段，早就过去了。父母亲，对于一个二十岁的人而言，恐怕就像一栋旧房子：你住在它里面，它为你遮风挡雨，给你温暖和安全，但是房子就是房子，你不会和房子去说话，去沟通，去体贴它，讨好它。搬家时碰破了一个墙角，你也不会去说“对不起”。父母啊，只是你完全视若无睹的住惯了的旧房子吧。 我猜想要等足足二十年以后，你才会回过头来，开始注视这没有声音的老屋，发现它.. &ndash;龙应台 《亲爱的安德烈》</li>
<li>凡事都有定期、天下万物都有定时，生有时、死有时……       寻找有时、放手有时，保持有时、舍弃有时       撕裂有时、缝补有时，静穆有时、言语有时       喜爱有时、恨恶有时，争战有时、和好有时”       难的是，你如何辨识寻找和放手的时刻，你如何懂得，什么是什么呢？ &ndash;龙应台 《目送》</li>
<li>想想看，你用什么东西量时间？一只漏沙里细沙流完是一段时间。一炷馨香袅袅烧完是一段时间。一盏清茶，从热到凉，是一段时间。钟表的指针滴答行走一圈，是一段时间。 &ndash;龙应台 《时间》</li>
<li>我们这一代人，错错落落走在历史的山路上，前后拉得很长。同龄人推推挤挤走在一块，或相濡以沫，或怒目相视。年长一点的默默走在前头，或迟疑徘徊，或漠然而果决。前后虽隔数里，声气婉转相通，我们是用一条路上的同代人。 &ndash;龙应台 《目送》</li>
<li>你知道吗？象棋里头我觉得最“奥秘”的游戏规则，就是“卒”。卒子一过河，就没有回头的路。人生中一个决定牵动另一个决定，一个偶然注定另一个偶然，因此偶然从来不是偶然，一条路势必走向下一条路，回不了头。我发现，人生中所有的决定，其实都是过了河的“卒”。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>真正有信心的人不怕暴露自己的缺点，试图掩盖粉饰才是没有信心的表现。 &ndash;龙应台 《野火集》</li>
<li>如果科学家能把一滴眼泪里所有的成分都复制了，包括水和盐和气味、温度&ndash;他所复制的，请问，能不能被称作一滴“眼泪”呢？ &ndash;龙应台 《目送》</li>
<li>对于行路的我而言，曾经相信，曾经不相信，今日此刻也仍旧在寻找相信。但是面对时间，你会发现，相信或不相信都不算什么了。 &ndash;龙应台 《目送》</li>
<li>人生，其实像一条从宽阔的平原走进森林的路。在平原上同伴可以结伙而行，欢乐地前推后挤、相濡以沫；一旦进入森林，草丛和荆棘挡路，各人专心走各人的路，寻找各人的方向，那推推挤挤的各人情感，那无忧无虑无猜忌的同侪深情，在人的一生中也只有少年才有。离开这段纯洁而明亮的阶段，路其实可能越走越压抑。你将被家庭羁绊，被责任捆绑，被自己的野心套牢，被人生的复杂和孤独压抑，你往丛林深处走去，越走越深，不复再有阳光似的&hellip; &ndash;龙应台 《亲爱的安德烈》</li>
<li>南美洲有一种树，雨树，树冠巨大圆满如罩钟，从树冠一端到另一端可以有三十米之遥。阴天或夜间，细叶合拢，雨，直直自叶隙落下，所以叶冠虽巨大且密，树底的小草，却茵茵然葱绿。兄弟，不是永不交叉的铁轨，倒像同一株雨树上的枝叶，虽然隔开三十米，但是同树同根，日开夜合，看同一场雨直直落地，与树雨共老，挺好的。 &ndash;龙应台 《目送》</li>
<li>只能想象，他的内在世界和我的一样波涛深邃，但是，我进不去。 &ndash;龙应台 《目送》</li>
<li>你将来会碰到很多你不欣赏、不赞成的人，而且必须与他们共事。这人可能是你的上司、同事，或部署，这人可能是你的市长或国家领导。你必须每一次都作出决定：是与他决裂、抗争，还是妥协、接受。抗争，值不值得？妥协，安不安心？在信仰和现实之间，很艰难的找出一条路来。你要自己找出来。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>妈妈是那个搭了“时光机器”来到这里但是再也找不到回程车的旅人。 &ndash;龙应台 《目送》</li>
<li>你能想象比‘被物质撑得过饱后的漠然’更贫乏的存在状态吗？ &ndash;龙应台 《目送》</li>
<li>所谓父女母子一场，只不过意味着，你和他的缘分就是今生今世不断地在目送他的背影渐行渐远。你站立在小路的这一端，看着他逐渐消失在小路转弯的地方，而且，他用背影默默告诉你：不必追 &ndash;龙应台 《目送》</li>
<li>不是渐行渐远，而是有一天终要重逢；你的名字，清楚地留在世纪的史记里。 &ndash;龙应台 《目送》</li>
<li>农村中长大的孩子，会接触更真实的社会，接触更丰富的生活，会感受到人间的各种悲欢离合。所以更能形成那种原始的，正面的价值观&ndash;”那“愚昧无知”的渔村，确实没有给我知识，但是给了我一种能力，悲悯同情的能力，使得我在日后面对权力的傲慢、欲望的嚣张和种种时代的虚假时，仍旧得以穿透，看见文明的核心关怀所在。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>可是，在你没有亲身试过以前，你不能说“不可能”！在你没有努力奋斗过以前，你也不能谈“无力感”。 &ndash;龙应台 《野火集》</li>
<li>在暂时里，只有假设性的永久和不敢放心的永恒。 &ndash;龙应台 《目送》</li>
<li>曾经相信过历史，后来知道，原来历史的一半是编造。前朝史永远是后朝人在写，后朝人永远在否定前朝，他的后朝又来否定他，但是负负不一定得正，只是累积渐进的扭曲变形移位,说“不容青史尽成灰”，表达的正是，不错，青史往往是要成灰的。指鹿为马，也往往是可以得逞和胜利的。 &ndash;龙应台 《相信与不相信》</li>
<li>我们拼命地学习如何成功冲刺一百米，但是没有人教过我们：你跌倒时，怎么跌得有尊严；你的膝盖破得血肉模糊时，怎么清洗伤口、怎么包扎；你痛得无法忍受时，用什么样的表情去面对别人；你一头栽下时，怎么治疗内心淌血的创痛，怎么获得心灵深层的平静；心像玻璃一样碎了一地时，怎么收拾？ &ndash;龙应台 《目送》</li>
<li>设想一个跑道上，有人正在跑五千米，有人在品百米冲刺，也有人在做清晨的散步。你要看你让自己站在那一条跑道上。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>什么样的工作比较可能给你快乐？第一，给你意义；第二，给你时间。你的工作是你觉得有意义的，你的工作不绑架你使你成为工作的俘虏，容许你去充分体验生活，你就比较可能是快乐的。 当你的工作在你心中有意义，你就有成就感。当你的工作给你时间，不剥夺你的生活，你就有尊严。成就感和尊严给你快乐。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>如果你年轻却不激进，那么你就是个没心的人；如果你老了却不保守，你就是个没脑的人。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>一件事情的毕业，永远是另一件事情的开启。 &ndash;龙应台 《目送》</li>
<li>只有一个人能听的音乐，是一扇紧闭的门。 &ndash;龙应台 《目送》</li>
<li>“所有其他的人，会经历结婚、生育、工作、退休，人生由淡淡的悲伤和淡淡的幸福组成，在小小的期待、偶尔的兴奋和沉默的失望中度过每一天，然后带着一种想说却又说不来的‘懂’，做最后的转身离开。” &ndash;龙应台 《目送》</li>
<li>醒来，方知是梦，天色幽幽，怅然不已。 &ndash;龙应台 《目送》</li>
<li>曾经相信过爱情，后来知道，原来爱情必须转化为亲情才可能持久，但是转化为亲情的爱情，犹如化入杯水中的冰块-它还是冰块吗？ &ndash;龙应台 《相信不相信》</li>
<li>至于人们的“期待”，那是一种你自己必须学会去“抵御”的东西，因为那个东西是最容易把你绑死的圈套。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>生活是抑郁的，人生是浪费的，可如果拉长来看，却是在抑郁中逐渐成熟，在浪费中逐渐累积能量。因为，经验过压迫的人更认识自由的脆弱，更珍惜自由的难得。你没发现，经过纳粹历史的德国人就比一向和平的瑞士人深沉一点吗？ &ndash;龙应台 《亲爱的安德烈》</li>
<li>我的梦想是：希望中国的下一代，可以在任何一个晚上，站在任何一个地方，说出心里想说的话而心中没有任何恐惧。我们这一代人所作的种种努力，也不过是寄望我们的下一代将有“免于恐惧的自由”。 &ndash;龙应台 《野火集》</li>
<li>我担心的不是你职业的贵贱、金钱的多寡、地位的高低，而是，你的工作能给你多少自由？“性、爱、摇滚乐”是少年清狂时的自由概念，一种反叛的手势；走进人生的丛林之后，自由却往往要看你被迫花多少时间在闪避道上荆棘。 所谓父母，就是那不断对着背影既欣喜又悲伤、想追回拥抱又不敢声张的人。 大树，有大树的长达；小草，有小草的长法。这世上大部分的人，都是小草。你不是孤独的。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>对时间的无言，对生命的目送。 &ndash;龙应台 《目送》</li>
<li>母亲想念成长的孩子，总是单向的；充满青春活力的孩子奔向他人生的愿景，眼睛热切望着前方，母亲只能在后头张望他越来越小的背影，揣摩，那地平线有多远，有多长，怎么一下子，就看不见了。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>金门的美，怎么看都带着点无言的忧伤。一栋一栋颓倒的洋楼，屋顶垮了一半，残破的院落里柚子正满树摇香。如果你踩过破瓦进入客厅，就会看见断壁下压着水渍了的全家福照片，褪色了，苍白了，逝去了。一只野猫悄悄走过墙头，日影西斜。 &ndash;龙应台 《目送》</li>
<li>你一定要“离开”才能开展你自己。所谓父母，就是那不断对着背影既欣喜又悲伤，想追回拥抱又不敢声张的人。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>你怎么能够不生气呢？你怎么还有良心躲在角落里做“沉默的大多数”?你以为你是好人，但是就因为你不生气、你忍耐、你退让，所以摊贩把你的家搞得像个破落大杂院，所以台北的交通乌烟瘴气，所以淡水河是条烂肠子；就是因为你不讲话、不骂人、不表示意见，所以你疼爱的娃娃每天吃着、喝着、呼吸着化学毒素，你还在梦想他大学毕业的那一天！你忘了，几年前在南部有许多孕妇，怀胎九月中，他们也闭着眼梦想孩子长大的那一天，却没想到吃了滴滴纯净的沙拉油，孩子生下来是瞎的、黑的！ 不要以为你是大学教授，所以作研究比较重要；不要以为你是杀猪的，所以没有人会听你的话；也不要以为你是个学生，不够资格管社会的事。 &ndash;龙应台 《野火集》</li>
<li>曾经相信过文明的力量，后来知道，原来人的愚昧和野蛮不因文明的进展而消失，只是愚昧野蛮有很多不同的面貌。 &ndash;龙应台</li>
<li>一半的人在赞美我的同时，总有另外一半的人在批判我。我有充分机会学习如何“宠辱不惊”。至于人们的“期待”，那是一种你自己必须学会去“抵御”的东西，因为那个东西是最容易把你绑死的圈套。不知道就不要说话，傻就不装聪明。你现在明白为何我推掉几乎所有的演讲、座谈、上电视的邀请吧？我本来就没那么多知识和智能可以天天去讲。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>在平凡和现实里，也必有巨大的美的可能吧。 &ndash;龙应台 《目送》</li>
<li>曾经不信“性格决定命运”，现在信了。曾经不信“色即是空”，现在信了。曾经不信“船到桥头自然直”，现在有点信了。曾经不信无法实证的事情，现在也还没准备信，但有些无法实证的感觉，我明白了，如李叔同圆寂前的手书：“君子之交，其淡如水……”信与不信间，彷佛还有令人沉吟的深度。 &ndash;龙应台</li>
<li>现在这个男人当然完全地属于你，做妻子的你；但是他的过去却属于我，做母亲的我。 &ndash;龙应台 《孩子你慢慢来》</li>
<li>于是可能在某个微雨的夜晚，一盏寒灯，二三饮者，在觥筹交错之后突然安静下来，怅然若失，只听窗外风穿夜林肃肃山川一时寂寥。 &ndash;龙应台 《什么》</li>
<li>我坐在风暴中心，四周却一片寂静，这是寂寞的感觉，像沙尘暴的漫天黑沙，以鬼魅的速度，细微地渗透地包围过来。 &ndash;龙应台 《目送》</li>
<li>怎么就知道，你活得比我长呢？时间才是最后的法官。 &ndash;龙应台 《目送》</li>
<li>为了享受物质，有人制造假的奶粉，明明知道可能害了千百个婴儿的 性命。为了逃避责任，有人在肇事之后，回过头来把倒地呻吟的人瞄准了再 辗过一次。我们的子女坐在教室里，让毒气给轰倒。我们的朋友喝了伪酒而 失明。我们的兄弟，被车撞断了腿，每天拄着拐杖，一跛一跛上学校。而我 们自己，心平气和地吃喝各色各样的化学毒素，呼吸污浊的空气，在横行霸 道的车辆间仓皇怯懦地苟活，要糟到什么程度你才会大吃一惊？ &ndash;龙应台 《野火集》</li>
<li>如果要维持一点基本的人的尊严，我们就不得不仰靠一个合理的社会秩序。这个社会秩序不仅要求我们自己不去做害人利己的事，还要求我们制止别人做害人利己的事。你自己不做恶事只尽了一半责任，另一半的责任是，你不能姑息，容忍别人来破坏这个社会秩序。 &ndash;龙应台 《野火集》</li>
<li>幸福就是，早上挥手说“再见”的人，晚上又平平常常地回来了，书包丢在同一个角落，臭球鞋塞在同一张椅下。 &ndash;龙应台 《目送》</li>
<li>所谓家嘛，就是一个能让你懒惰、晕眩、疯狂放松的地方。&ndash;安德烈 &ndash;龙应台 《亲爱的安德烈》</li>
<li>二十多岁的人，可以是惊世才华正初露头角，可以是碌碌凡人却胸有成竹，而心理学家告诉我们：如果我们执意将他当作＂孩子＂，他，也就众望所归地变成一个＂孩子＂。 &ndash;龙应台 《这个动荡的世界》</li>
<li>我有一种乡下人特有的愚钝。成长在乡村海畔，不曾识都会繁华，十八岁才第一次看见同龄的女生用瓶瓶罐罐的化妆品，才发现并非所有的女生都和我一样，早上起来只知道清水洗素颜，在台南的凤凰树下闲散读书，亦不知何谓竞争和进取，毕业后到了台北，大吃一惊，原来台北人人都在考托福，申请留学。-什么 &ndash;龙应台 《目送》</li>
<li>传统不是怀旧的情绪，传统是生存的必要。 &ndash;龙应台 《什么是真正的“国际化”》</li>
<li>中年人的沧桑中，总有一种无言的伤痛。目送生命的逝去，目送生命的远行，却只能目送，无法挽留。 &ndash;龙应台 《目送》</li>
<li>曾经相信过正义，后来知道，原来同时完全可以存在两种正义，而且彼此抵触，冰火不容。选择其中之一，正义同时就意味着不正义。而且，你绝对看不出，某些人在某一个特定的时机热烈主张某一个特定的正义，其中隐藏着深不可测的不正义。 &ndash;龙应台 《相信不相信》</li>
<li>教育者所不自觉的矛盾是：他们在“智”育上希望学生像野兔一样往前冲刺（当然也有为人师者希望学生在智育上也如乌龟）；在所谓“德”育上，却拼命把学生往后拉扯，用框框套住，以求控制。这两者其实不能并存。有高压式的“德”育，就不可能有自由开放的“智”育，换句话说，我们如果一心一意要培养规矩顺从听话的“乖”学生，就不要梦想教出什么智慧如天马行空的优秀人才。“庸材”的“德”育之下不可能有真正的“智”育。 &ndash;龙应台 《野火集》</li>
<li>从哪里来，往哪里去，心中渐渐有一分明白，如月光泻地。 &ndash;龙应台 《目送》</li>
<li>文明和野蛮的中隔线，薄弱，混沌，而且，一扯就会断。 &ndash;龙应台 《目送》</li>
<li>无法表达自己的人──不论是由于贫穷，或是由于不自由，或者单单因为自己心灵的封闭，而无法表达自己的人，我最同情。因为我觉得，人生最核心的“目的”──如果我们敢用这种字眼的话，其实就是自我的表达。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>当我站在十字路口,看见红灯未灭就在乌烟瘴气中冲过街去的一张张杀气腾腾的脸,我觉得惊骇:是什么,使这个城市充满着暴戾与怨气? &ndash;龙应台 《野火集》</li>
<li>人在天地之间终究是无所凭依的孤独，你真能面对生老病死，就真的明白，在这世间，没有什么可以附着依托。 &ndash;龙应台 《目送》</li>
<li>就这样漫无目的地行走，身上没有一个包袱，手里没有一张地图。 &ndash;龙应台 《目送》</li>
<li>相机，原来不是那么重要，它不过是我心的批注，眼的旁白。 &ndash;龙应台 《目送》</li>
<li>淡水的街头，阳光斜照着窄巷里这间零乱的花铺。  回教徒和犹太人在彼此屠杀，衣索匹亚的老弱妇孺在一个接一个地饿死，纽约华尔街的证券市场挤满了表情紧张的人&ndash;我，坐在斜阳浅照的石阶上，愿意等上一辈子的时间，让这个孩子从从容容地把那个蝴蝶结扎好，用他五岁的手指。 &ndash;龙应台 《孩子你慢慢来》</li>
<li>我们总是在相信与不相信之间挣扎。 &ndash;龙应台 《相信与不相信》</li>
<li>每一个被我“看见”的瞬间刹那，都被我采下，而采下的每一个当时，我都感受到一种“美”的逼迫，因为每一个当时，都稍纵即逝，稍纵，即逝。 &ndash;龙应台 《目送》</li>
<li>在他往后成长的岁月里，他会见到无数的人间恶事，没有必要让两岁就开始直到人与人之间的仇恨，人的快乐童年何其匆促，何其珍贵！ &ndash;龙应台 《孩子你慢慢来》</li>
<li>你我还会这样相聚吗？我们会不会，像风中转蓬一样，各自滚向渺茫，相忘于人生的荒漠。 &ndash;龙应台</li>
<li>我想作家也分成三种吧！坏的作家暴露自己的愚昧，好的作家使你看见愚昧，伟大的作家使你看见愚昧的同时认出自己的原型而涌出最深刻的悲悯。这是三个不同的层次。 &ndash;龙应台 《百年思索》</li>
<li>这个世界，凡有爱的事情都好办一点，怕的是恨，不是爱。 &ndash;龙应台 《孩子你慢慢来》</li>
<li>理想主义者往往经不起权力的测试。 &ndash;龙应台 《目送》</li>
<li>龙应台：你可以选择做官，你也可以选择挣钱，但你不能选择通过做官来挣钱；你可以选择做圣人，也可以选择做俗人，但你不能选择让大家像圣人一样崇拜你，还要像俗人一样原谅你。只想要权力不想要约束是恶霸，只想要享受不想尽义务是流氓。” &ndash;龙应台</li>
<li>在台湾，最容易生存的不是蝉螂，而是“坏人”，因为中国人怕事、自私，只要不杀到他床上去，他宁可闭着眼假寐。 &ndash;龙应台 《野火集》</li>
<li>春节的爆竹在冷过头的冬天有一下没一下的，凉凉的，仿佛浸在水缸里的酸菜。 &ndash;龙应台 《目送》</li>
<li>几流的人民就有几流的政府 就有几流的社会 几流的环境 沉默不是美德 是耻辱 &ndash;龙应台 《野火集》</li>
<li>人瘦并不可耻，可耻的是把自己的脸打肿了来冒充胖子。 &ndash;龙应台 《野火集》</li>
<li>安德烈，我们自己心里的痛苦不会因为这个世界有更大或者更“值得”的痛苦而变得微不足道；它对别人也许微不足道，对我们自己，每一次痛苦都是绝对的，真实的，很重大，很痛。 你应该跟这个你喜欢的女孩子坦白或者遮掩自己的感情？我大概不必告诉你，想必你亦不期待我告诉你。我愿意和你分享的是我自己的“心得报告”，那就是，人生像条大河，可能风景清丽，更可能惊涛骇浪。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>最平凡、最普通的恐惧吧？我恐惧失去所爱。你们小的时候，放学时若不准时到家，我就幻想你们是否被人绑走或者被车子撞倒。你们长大了，我害怕你们得忧郁症或吸毒或者飞机掉下来。 我恐惧失去所能。能走路、能看花、能赏月、能饮酒、能作文、能会友、能思想、能感受、能记忆、能坚持、能分辨是非、能有所不为、能爱。每一样都是能力，每一种能力，都是可以瞬间失去的。 显然我恐惧失去。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>大树有大树的长法；小草有小草的长法；这世上大部分的人，都是小草。你不是孤独的。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>文化，根本没有“固有”这回事。它绝不是一副死的挂在墙上已完成的画&ndash;油墨已干，不容任何增添涂抹。文化是一条活生生的、浩浩荡荡的大江大河，里头主流、支流、逆流、漩涡，甚至于决堤的暴涨，彼此不断的激荡冲撞，不断形成新的河道景观。文化一“固有”，就死了 &ndash;龙应台 《百年思索》</li>
<li>他好像在听一个不可及的梦想，又仿佛在夜行暗路上突然听见熟悉的声音，轻轻呼唤自己的名字，带点不可思议的向往与情怯：是啊，太湖边，柳树下，线装书&hellip;&hellip; &ndash;龙应台 《目送》</li>
<li>一件事情的毕业，永远是另一件事情的开启。”人生就是如此，你以为已经从一个漩涡逃离，其实另外一个漩涡就在你的脚下。用力蹬一脚，就进去了。所以，不需要对生活太用力，心会带着我们去该去的地方。 &ndash;龙应台</li>
<li>这个社会不知为什么对过去充满怀念，对现在又充满幻灭，往未来看去似乎又无法找到什么新鲜的想象。我们的时代仿佛是个没有标记的时代，连叛逆的题目都找不到。因此我们退到小小的自我。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>很长时间后的我才完全明白，常常不是善与恶之间的力量在战斗，而仅仅是两个不同的恶，在为了控制世界而相互争斗。 &ndash;龙应台 《野火集》</li>
<li>你站在小路的这一端，看着他逐渐消失在小路转弯的地方，而且，他用背影告诉你：不必追。 &ndash;龙应台 《目送》</li>
<li>所有美好的都已美好的过去了，甚至夜夜来吊唁的蝶梦也冷了。是的，至少你还有虚无留存。你说，至少你已懂得什么是什么了。是的，没有一种笑是铁打的，甚至眼泪也不是。 &ndash;龙应台 《目送》</li>
<li>才子当然心里冰雪般的透彻：有些事，只能一个人做。有些关，只能一个人过。有些路啊，只能一个人走。 &ndash;龙应台 《目送》</li>
<li>不要忘记这些过去的记忆，因为这些记忆，会跟着我们的人生，一生一世，只不过，它们不再像我们儿时那么的明显。 &ndash;龙应台 《孩子你慢慢来》</li>
<li>素养和知识的差别，容许我窃取王阳明的语言来解释。学生问他为什么许多人知道孝悌的道理，却做出邪恶的事情，那么“知”和“行”是不是两回事呢？王阳明说：“此已被私欲隔断，不是知行的本体了。未有知而不行者；知而不行，只是未知。”在我个人的解读里，王阳明所指知而不行的“未知”就是“知识”的层次，而素养，就是“知行的本体”。王阳明用来解释“知行的本体”的这四个字很能表达我对“人文素养”的认识：真诚恻怛。 &ndash;龙应台 《百年思索》</li>
<li>人本是散落的珠子，随地乱滚，文化就是那根柔弱又强韧的细丝，将珠子串起来成为社会。 &ndash;龙应台 《文化，是什么？》</li>
<li>生命败坏的过程，其实就是走向失去。于是，所谓以智慧面对败坏，就是你面对老和死的态度了。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>他正在和一伙人谈他身为奶爸的经验：他如何被一个从早到晚只会啼哭的小东西完全地控制，他的生活如何如何的狼狈……大伙正要到颓废的酒吧去，他站起来，说：【对不起，我要回去喂奶了。】那晚，他走得洋洋得意。他用受虐的、抱怨的方式来表达心中洋溢的幸福。 &ndash;龙应台 《孩子你慢慢来》</li>
<li>在中国文革的狂热中，在德国希特勒的民族主义热浪中，在日本军国主义的大趋势中，人人都是泥人，你要泥人怎么样跳出塑泥的大手掌去辨别客观的真伪呢？确实有些人，在举国欢呼：”嗨，希特勒”的时候，清楚地冷眼洞悉隐藏在爱国狂热背后的危机，目击是非价值的颠倒，弃德国而去。这些人，毕竟是少数中的少数。大多数的人，即使动了疑心，也没有能力作独立的判断。一个当过红卫兵的人告诉我：”当时我们冲进教室把老师拖出来打得鼻青眼肿，逼他下跪，我心里觉得好像有点不对，可是大家都这么做，一副理所当然的样子，所以我也定了心，放心地去打。”人云亦云是人的常态，自我觉醒、反抗潮流，是人对自己较高的道德期许，一种理想的追求。 &ndash;龙应台 《人在欧洲》</li>
<li>亲爱的，难道你觉得，两个人一定比一个人不寂寞吗？-寂寞 &ndash;龙应台 《目送》</li>
<li>如果在我们十二岁那年，有人跟我偶们这样上课，会怎么样？ 当然，没有一个老师，会对十二岁的孩子们这样说话。因为，这，哪能做人生的“座右铭”呢？-1964 &ndash;龙应台 《目送》</li>
<li>爱情总是幻灭的多   但萤火虫再夜里发光从来就不是为了保持光 &ndash;龙应台</li>
<li>二十世纪的人犹豫、怀疑、思索，不是因为他知道得太少，而是因为他知道得太多；不是因为他西化太浅，而是因为他西化太深。 &ndash;龙应台 《百年思索》</li>
<li>君主专制的时代，一个人可以决定历史。那个人也许是英雄，也许是暴君。 &ndash;龙应台 《百年思索》</li>
<li>我想说的是，K在我们整个成长的过程里，谁，教过我们怎么去面对痛苦、挫折、失败？它不在我们的家庭教育里，它不在小学、中学、大学的教科书或教程里，它更不在我们的大众传播里，家庭教育、社会教育、社会教育只叫我们如何去追求卓越，从看樱桃的华盛顿，悬梁刺股的孙敬、苏秦到平地起楼的比尔 盖茨，都是成功的典范 &ndash;龙应台 《目送》</li>
<li>一首歌，像一只河，也有它的流域。 &ndash;龙应台 《百年思索》</li>
<li>虽说是兵荒马乱。他们有的是青春力气，火车再怎么高，它们爬得上去，人群在怎么挤。他们站的起来，就是只有一只脚站着踏板，一只手抓着铁杆，半个身子吊在火车外面像风筝就要断线，还能闻到那风里有香茅草的清酸甜美，还能看见土地大地绵延不尽。令人想迎风高唱“山河壮丽”-五百里 &ndash;龙应台 《目送》</li>
<li>保姆代劳，和我分担了对孩子的责任，而那精疲力竭的男人也得到一点休息；用这个方式暂时解决了我的难题，但是并没有为这个时代的新女性回答任何问题：有了孩子的男人和女人如何在养育儿女和追求事业之间寻求平衡？国家必须介入到哪一个程度? (不要告诉我像中国大路那种“全托”制度有任何优点，我坚持我的偏见）。“男主外，女主内”，如果不是自由选择，就不公平，但是男女都主“外”的时候，“内”由谁来主？如何平等地主“内”？ &ndash;龙应台 《女子与小人》</li>
<li>可是您不是专栏作家也不是历史学者，您是以台湾人“总统”的身份与日本人说话，您您的考虑必须比我们要多一层：除了单纯的对历史回顾的诚实之外，李先生，您还担有前瞻性的政治责任。一个被殖民国的“总统”，在获得自由之后，对殖民国说：感谢你教了我很多东西。 &ndash;龙应台 《这个动荡的世界》</li>
<li>活的文化，死的理解。希罗多德曾经举过一个例子：“大流士王召集了一批希腊人到宫廷上，问他们，什么代价可以使他们愿意去吃自己父亲的遗体；希腊人说，不可能，没有任何代价能让他们去做如此可怕的勾当。同时，殿前有一批印度人，这个部落的印度人是以吃父辈遗体为风俗的。大流士问他们，什么代价可以使他们愿意将父亲的遗体火化（希腊人火化遗体）。印度人大惊失色：不可能，不，没有任何代价能让他们去做如此可怕的勾当，想都别想。” &ndash;龙应台 《百年思索》</li>
<li>所以跨年的狂欢，聚集、倒数，恐怕也是一种时间的集体仪式吧？都市里的人，灯火太亮，已经不再习惯看星星的移动和潮汐的涨落，他们只能抓住一个日期，在那一个晚上，用美酒、音乐和烟火，借着人群的吆喝彼此壮胆，在那看不见的门沿量尺上，刻下一刀。 &ndash;龙应台 《时间》</li>
<li>政客关心个人权利，哗众取宠。政治家关心国家整体前途，有拒绝媚俗的勇气。拉宾以生命来证明了这个分野。 &ndash;龙应台 《百年思索》</li>
<li>在台湾革新很难，一方面固然是由于许多制度的僵化，另外还有保守的执政单位对社会自觉运动的疑惧，一个更大的阻碍，确实民众本身缺乏动力。 &ndash;龙应台 《野火集》</li>
<li>当他垂垂老时，他可以回乡了，山河依在，春天依旧，只是父母的坟，在太深的草里，老年僵硬的膝盖，无法跪拜。乡里，已无故人。 &ndash;龙应台 《目送》</li>
<li>我可以不聪明，但我不可以虚伪 &ndash;龙应台 《女子与小人》</li>
<li>中国人没有这个问题。8月份在北京农村，走过“大队”的高墙，我问那在村子里生长的妇女：“文革时候欺凌别人的坏蛋，今天都到哪里去了？”她笑笑，指指高墙。“在里头哩！”中国人喜欢讲宽恕，因为宽恕不但道德上好听，而且用起来方便。有了速食面似的宽恕，人就可以饱饱的上床，倒头就睡。我倒是再喝一杯咖啡，今晚就要失眠了。 &ndash;龙应台 《百年思索》</li>
<li>“历史的冷酷无情”老人说，“没有人比巴勒斯坦人更清楚。我在城里活了一辈子，可是每次到约旦看亲戚回来，我还得办以色列签证才回得来&mdash;-你听过什么人回家得办签证的吗？”是的，我听过，当年，持中国护照的台湾人要回台湾那个自己的假，是得向日本人办理签证的，这就叫占领。 &ndash;龙应台 《百年思索》</li>
<li>读书用功，不是因为要跟别人比成就，而是因为，我希望将来会拥有选择的权利，选择有意义、有时间的工作，而不是被迫谋生。当你的工作在你心中有意义，你就有成就感。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>仁民爱物是一种道德理想，我们希望每个人都能努力以赴，可是，你不能因为一个人做不到仁民爱物的标准而判他十年徒刑；仁民爱物是一个道德的上限，必须当他碰到下限&ndash;譬如杀人&ndash;的时候，你才能惩罚他。误上了贼船的人，我们希望他有所觉醒，在”工作与良知”之间毅然有所抉择，跳海也在所不惜，但这又是一个道德的期许，不是判罪的标准。把上限的道德期许拿来作为判罪惩处的下限标准，岂不失之太苛乎？人，没有那么干净吧？ &ndash;龙应台 《人在欧洲》</li>
<li>我的安德烈，你认为美丽的热带鱼游泳也要在乎方向吗？或者，你要挑衅地说，这是一个无谓的问题，因为热带鱼只为自己而活？ &ndash;龙应台 《十八岁那一年》</li>
<li>譬如李叔同圆寂前最后的手书：“君子之交,其淡如水,执象而求,咫尺千里。问余何适,廓尔忘言,华枝春满,天心月圆。 &ndash;龙应台 《目送》</li>
<li>一个社会特立独行的人越多，天分、才气、道德、勇气就越多。 &ndash;龙应台</li>
<li>有时候，约个可爱的人，两个人一起走，但是两个人一起走时，一半的心在那人身上，只有一半的心，在看风景。 &ndash;龙应台 《你来看此花时》</li>
<li>茫然慨既往，默坐慎将来。 &ndash;龙应台 《大江大海》</li>
<li>德国人的反省本身也是一个层次复杂的东西。当一个德国人对自己的过去毫不留情地大加鞭挞时，他可能是一个最具自我批判性、最清醒的《春秋》史家，但是他也可能是一个戴着面具的文化沙文主义者；当他说德国人的罪行举世无双时，他没说出口的话是：德国人的文明高度是举世无双的。     他的反省看起来谦卑，其实是傲慢。 &ndash;龙应台 《我的不安》</li>
<li>文字之所以有力量将不同世界的人牵引在一起，是因为不管他们经过了什么看见了什么，在心的最深处，他们有一样的害怕与追求、相似的幻灭与梦想，午夜低回时有一样的叹息。    我们毕竟在同一条历史的长廊里，或前或后；鲜花释出清香，像丝带缭绕。 &ndash;龙应台 《我的不安》</li>
<li>强权做不到的，是文化的力量，将无异议的碎片组成有意义的拼图。 &ndash;龙应台 《文化，是什么？》</li>
<li>孩子是两个人的，生孩子也是两个人的事情。当医生和护士在为众多的病人跑进跑出的时候，只有丈夫能够握着你的手，陪你度过每一场阵痛的凌虐。夫妻的同舟共济，没有更好的时候。两个人先共度苦痛，苦痛之后再共享欣喜。 &ndash;龙应台 《孩子你慢慢来》</li>
<li>现代日本的身强体壮、脑清目明，分析起来，乃是以古典大陆哲学、东方宗教文化强身，再以西洋文化固脑，将东洋跟西洋文化融合，提炼出的一种东瀛经验。只是，相较于日本人重视长时间积累，凸显本质性的文化模仿与创造，当代台湾社会所呈现的，往往是一种渴望立即见效的，建构式速成拼贴文化。追究起来，我们得勇于承认，混血与变异恐怕才是台湾文化的本质。 &ndash;龙应台 《野火集》</li>
<li>经过两次大战的现代人，其实一直在努力地维持清醒。他一次又一次地受到操纵与蒙骗，一次又一次被带到毁灭边缘。所以，已经有人开始睁开眼睛检视船行的方向。西方的反核战运动就是一种自觉运动，一向被动的人反过来希望主动地决定自己的未来，不让所谓”领导人”或狂热的群众牵着鼻子走。台湾近年来开始蓬勃的民主运动与反污染热潮，也代表一种觉醒与反抗，人试图塑造自己的命运，如果缺少这种觉醒与反抗，人恐怕早就在自己的愚昧中灭顶了。 &ndash;龙应台 《人在欧洲》</li>
<li>“轻辞古之天子，难辞仿今之县令者也”，原因，不是道德，不是文化，不是民族性，是什么呢？“薄厚之实异也”，经济利益，经济问题，体制结构，造成了今天完全不一样的行为。 &ndash;龙应台 《百年思索》</li>
<li>亲爱的安德烈：      你在电话上听起来上气不接下气：刚刚赛完足球才进门，晚上要和朋友去村子里的酒吧聊天，明天要考驾照，秋天会去意大利，暑假来亚洲学中文，你已经开始浏览大学的入学数据……   “可是，我真的不知道将来要做什么，”你说，“MM，你十八岁的时候知道什么？” &ndash;龙应台 《亲爱的安德烈》</li>
<li>”不跳海，就是贼”的赏罚原则对人有高度的道德要求。首先，它要求一个人上了”贼船”要认得出这是艘”贼船”；也就是说，人要有”众人皆醉我独醒”的洞悉是非真伪的智慧；其次，它要求人有”跳船”的勇气。认清贼船之后，即使不能英勇地把掌舵的暗杀了，或者放火烧船起义，至少要拒绝同流合行，毅然决然地跳船。 &ndash;龙应台 《人在欧洲》</li>
<li>“矫讠伪行，以迷惑天下之主，而欲求宝贵焉，盗莫大于子。天下何不谓子为盗丘，而乃谓我为盗跖？”大哉斯讠！用现代的语言来说，监狱里的抢劫犯也许只盗了数得出的钱，高居要职的达官贵人所盗的可能是整个国家。谁是真正的大盗。得看用的是谁的标准。 &ndash;龙应台 《百年思索》</li>
<li>思想需要经验的积累灵感需要感受的沉淀，最细致的体验需要最宁静透彻的观照。哪一样可以在忙碌中产生呢？ &ndash;龙应台</li>
<li>二十岁的时候，我以为世界上没有不可解决的问题，就是被人口贩子拿去卖了沦为军妓，我都有办法再站起来，只要有意志力，人随时可以拯救自己。堕落是弱者的自愿选择。 &hellip;&hellip; 三十岁，我觉得女人只要有觉悟，她可以改变社会，改变自己。 &hellip;&hellip; 四十岁的我，发觉一旦加上孩子这一环，男女平等的问题就变得双倍的复杂。 &ndash;龙应台 《女子与小人》</li>
<li>一次国际笔会，使我再度看见人为自己的理想所做的种种努力；支撑那个理想的原动力，我想，就是那在柳条间漂浮的鹅黄乳鸭所牵动的，人心中对生命的欢喜与敬重。然而在人笨拙的努力中，我更看见了难以克服的障碍：与理想并存的，是人的自私、狭隘、弱肉强食……。诗人即使拎起了皮箱，他所唾弃的罪恶并不因而停止。 &ndash;龙应台 《这个动荡的世界》</li>
<li>蔡琴的声音，有大河的深沉，黄昏的惆怅，又有宿醉难醒的缠绵。 &ndash;龙应台 《目送》</li>
<li>年轻时发生在我们身上使我们一夜之间突然长大的那些事情，不管愿不愿意，在发生的那一刻即已成为我们自己的一部分。日后在我们以为早已摆脱或相忘的时候，它就在我们最漫不经心的一瞥中突然涌现，竟然已经成为我们看出去的眼瞳。 &ndash;龙应台 《这个动荡的世界》</li>
<li>道德、宗教、乌托邦，种种高贵的理念，原来都是人类愿望的投射，但借助于投射作用，镜子里外的世界其实是相反的。 &ndash;龙应台 《这个动荡的世界》</li>
<li>不可思议的是，那义和团拳民本身，又何尝不是许许多多自觉无私的、奉献的、崇高的个人，背上“扶清灭洋”的重任，视死如归。可是在历史的大漩涡里，他们给自己的民族带来意想不到弥补不了的劫难。 &ndash;龙应台 《我的不安》</li>
<li>这些传教士早在义和团的骚动中预见自己的死亡，但是他们的信仰给予他们视死如归的精神力量。然后他们原本崇高的精神力量，在时代的大景中看来，却显得荒谬。传教士在追求个人信仰的实现时，一点儿也不知道自己其实同时是帝国侵略主义的一只爪牙。无私的、奉献的、崇高的个人，在历史的大漩涡里，却变成一个欺凌的、不公不义的集体。 &ndash;龙应台 《我的不安》</li>
<li>华安坐在录音机前，正在专心致志地把录音磁带从匣中抽拉出来，已经拉出来的磁带乱糟糟缠成一团。若冰看着妈妈去抢救那些录音带，坐立不安地说：”他不会静静地坐下来看书吗？”妈妈拿了支铅笔插进录音带，边卷边说：”若冰，你看过小猴子静静地坐着看说吗？” &ndash;龙应台 《孩子你慢慢来》</li>
<li>《中国人，你为什么不生气？》 不要以为你是大学教授。所以作研究比较重要；不要以为你是杀猪的，所以没有人会听你的话；也不要以为你是个学生，不够资格管社会的事。你今天不生气，不站出来说话，明天你&ndash;还有我、还有你我的下一代。就要成为沉默的牺牲者、受害人！如果你有种、有良心，你现在就去告诉你的公仆-立法委员、告诉卫生署、告诉环保局：你受够了，你很生气！ 你一定要很大声的说！ &ndash;龙应台</li>
<li>一个政府发言人的责任，在对准了舆论界，将早已作好决定的政府立场转达给民众。而作成决定的政府是否在撒谎、欺骗，不是发言人的责任。甚至于即使他分明知道由自己嘴里讲出来的话是谎言，有悖他自己的良知判断，也不会有人指责发言人为欺骗者。他只是执行任务罢了。应该负责的，是那个存心欺骗的政府；或者说，是那个无法防御欺骗的、不完美的政府制度。 &ndash;龙应台 《人在欧洲》</li>
<li>谢天谢地我负担得起保姆，但不是每个人都能用我这个方法来解决问题。我喜爱孩子，所以不忍心将孩子托给他人照顾；我喜爱我的工作，所以我舍不得为了孩子完全放弃我的事业。我主张男女平等，所以不允许男人认为“男外女内”是天职；可是当我面对男人因工作压力而疲惫不堪的脸孔，我又不忍心在他肩上再堆上一份压力，即使那是本属于他的一切。 &ndash;龙应台 《女子与小人》</li>
<li>我不否认我也喜欢有较好的物质生活，不过最重要的，美国那样的社会比较可以让我专心而孤独地生活。我只想看书、写作、思考，其他什么都不要，什么都不想过问，只作我自己。在苏联，这办不到。 &ndash;龙应台 《人在欧洲》</li>
<li>你可以选择做圣人也可以选择做俗人，但你不能选择让大家像圣人一样崇拜你，还要像俗人一样原谅你。 &ndash;龙应台</li>
<li>女人是个很可爱的动物：身体软软的，眼睛甜甜的，头发香香的;更令人怜惜的是她没有逻辑的大脑，一加一等于二点五，可是噘着嘴，顿着足那样说出来，哎呀，真是可爱极了、嗲极了。至于少数女性居然弄起电脑、工程、医学，做起博士，教授，主观来，还摆出一副自立自主、对社会大有贡献的架势，我只能说，她对不起中国的五千年文化传统，对不起爱护她的中国男人。 &ndash;龙应台 《女子与小人》</li>
<li>说“不容青史尽成灰”，表达的正是，不错，青史往往是要成灰的。指鹿为马，也往往是可以逞和胜利的。 &ndash;龙应台</li>
<li>我细细在想，寂寞，是个什么状态；寂寞，该怎么分类？ &ndash;龙应台 《寂寞》</li>
<li>一条空荡荡的街，只立着一只邮筒。 &ndash;龙应台 《目送》</li>
<li>比做女人更重要的，是做一个纯粹而完整的人。 &ndash;龙应台 《女子与小人》</li>
<li>中国妇女是两面性的。正面是一个独立的人，权利平等，经济自立，是新中国的主人；背后却扛着一个沉重的家，依然是传统的，是家庭的主人抑或是奴隶？女人把正面展示给社会，社会因此显得更加文明进步；她把背面留给自己，累在身上，苦在心里。两面夹攻下，有新生的，有传统的，惟独仍然看不见女人自己&ndash;女性主体意识淹没在社会和家庭双重角色中。 &ndash;龙应台 《我的不安》</li>
<li>宇宙之内，最公道的有三，一曰天，二曰地，三曰良心。 &ndash;龙应台 《女子与小人》</li>
<li>历史条件更少不了政治现实。德国人忏悔对象是犹太人&ndash;战后团结起来声大势大的犹太人。同样被屠杀几近灭种的吉卜赛人却鲜有人提及。谁都知道“六百万”这个数目，可是谁知道吉卜赛人被害的数目？吉卜赛人没有组织、没有势力、没有声音。反省，显然不是一个单纯的道德问题，它可能更是种种政治势力较量的产物。 &ndash;龙应台 《我的不安》</li>
<li>我还是不认识我的读者。他们经过了什么又看见了什么？他们害怕着什么又追求着什么？他们有什么样的幻灭又有什么样的梦想？不曾和他们一起成长，我无从想象他们生活里的点点滴滴，可是在那长长的队伍前端，我们曾经深深地对望；回想那对望的一刻，或许我们竟是熟识的写作者在孤独中写作，读书人在孤独中阅读，那孤独其实是种种情怀的交会。 &ndash;龙应台 《我的不安》</li>
<li>坏的作家暴露自己的愚昧，好的作家使你看见愚昧，伟大的作家使你看见愚昧的同时认出自己的原型而涌出深刻的悲悯。 &ndash;龙应台 《我们为什么要学习文史哲》</li>
<li>孩子，我要求你读书用功，不是因为我要你跟别人比成绩，而是因为，我希望你将来会拥有选择的权利，选择有意义、有时间的工作，而不是被迫谋生。 &ndash;龙应台</li>
<li>回教徒和犹太人在彼此屠杀，衣索匹亚的老弱妇孺在一个接一个地饿死，纽约华尔街的证券市场挤满了表情紧张的人&ndash;我，坐在斜阳浅照的石阶上，愿意等上一辈子的时间，让这个孩子从从容容地把那个蝴蝶结扎好，用他五岁的手指。 &ndash;龙应台</li>
<li>您对日本语言和文化的一往情深，因此使我不安，在司马辽太郎的访问中，您对四十年的国民党高压统治批评颇多（没有一件是不对的），可是，在谈“悲哀的台湾人”时，却队伍十年日本殖民统治不置一言。您说在1945年后国民党的统治下，人们晚上连觉都睡不安稳&ndash;那么1945年前呢？我也知道，在思想钳制上，当年的国民党要比日本殖民政府蛮横得多，可是您毕竟是在和一个日本人对话，与《朝日周刊》广大的日本读者在沟通，您不觉得您有义务提供一个平衡的历史观&ndash;在批判老国民党的同时，提醒前殖民者：日本人是“台湾人的悲哀”的一部分？ &ndash;龙应台 《这个动荡的世界》</li>
<li>现代人怀疑一切，质疑一切，婚姻这个机构更不能免。在我看来，婚姻与个人的关系就如同国家机器与公民的关系。一个人需要安全，所以要婚姻，也要国家；但是人又渴望自由，虽是有逃避婚姻、反抗国家机器膨胀的欲望。婚姻和国家极其一样，两者都是必要之恶。 &ndash;龙应台 《女子与小人》</li>
<li>而民意的强权并不比政府的强权不危险。首先是民意本身的可疑及不可信赖。很大一部分的所谓民意由媒体形成。威权政府曾经是媒体的共同敌人，这个敌人没有了，媒体在自由中很吊诡地成为自己的敌人：报纸老板以一己的政治立场控制言论，政治人物利用媒体操纵舆论，电视唯利是图不设下限地自我庸俗化，媒体记者因素质不够而提供半真半假的讯息，因判断力不足而做出夸大或偏颇的评论。民意的形成过程中有太多太多操纵作假的空间，此其一。  而民意即使是真实的，却绝对未必是对的，此其二。 &ndash;龙应台 《这个动荡的世界》</li>
<li>长长的路，慢慢地走~~ &ndash;龙应台 《孩子你慢慢来》</li>
<li>奔忙，使作家无法写作，使音乐家无法谱曲，使画家无法作画，使学者无法著述；奔忙，使思想家变成名嘴，使名嘴变成娱乐家，使娱乐家变成聒噪小丑。闲暇、逗留，确实是创造力的有机土壤，不可或缺。 &ndash;龙应台 《有些事，只能一个人做》</li>
<li>对民意的批判从哪里来？如果民意指的是大多数人的意见，那么批判当然得来自少数人。民主的基本原则固然是“服从多数”，可是有一个不可或缺的下半句：“尊重少数”。在迷信民意、民粹主义越来越盛行的十年中，“服从多数”成为信条，“尊重少数”却被轻易遗忘。权威政府和暴力是明显而易见的，“多数”的暴力却往往隐于无形，因为可能批判它的人，本身或许就属于那多数而不察觉自己的霸道和粗暴。但是多数如果践踏“尊重少数”的原则，它就是另一个形式的暴力集团，彻底违背了民主的基本精神。 &ndash;龙应台 《这个动荡的世界》</li>
<li>这世间的风景于我的心如此“明白”，何尝在我“心外”？相机，原来不那么重要，它不过是我心的批注，眼的旁白。于是把相机放进走路的背包里，随时取出，作“看此花时”的心笔记。&ndash;你来看此花时 &ndash;龙应台 《目送》</li>
<li>天微微亮，她轻轻走到我身边，没声没息地坐下来。年老的女人都会这样吗？身子越来越瘦，脚步越来越轻，声音越来越弱，神情越来越退缩，也就是会所，人逐渐逐渐退为影子，年老的女人，都会这样吗？-雨儿 &ndash;龙应台 《目送》</li>
<li>和许许多多改革者、革命家一样，我曾经天真地以为专制政权被摧毁之后，自由就有了保障。十年回首，才知道那不过是个谦卑的开始。当人民自己掌握了权利而他对权力的相对责任了解不够时，他对自由的威胁和专制政权一样大。但是如果十年民主后的台湾显得混乱，我们的结论不该是民主制度不好，而是我们的民主体制不够成熟，不够健全。 &ndash;龙应台 《这个动荡的世界》</li>
<li>在你与世隔绝的修行室外，有很多人希望捎给你一句轻柔的话、一个温暖的眼神、一个结实的拥抱。我们都在这里，等着你。可是修行的路总是孤独的，因为智慧必然来自孤独。 &ndash;龙应台 《目送》</li>
<li>这个世界有太多的问题最后只有自己知道答案。或者没有。 &ndash;龙应台 《女子与小人》</li>
<li>所谓父母，就是对着你的背景既欣喜又悲伤，想追回拥抱却又不敢声张得人 &ndash;龙应台</li>
<li>不必打开，我就知道，存折里头，谁装了一个看不见的沙漏。 因为无法打开，看不见沙漏里的沙究竟还有多少，也听不见那漏沙的速度有多快，但是可以百分之百的确定的是，那沙漏不停地漏，不停地漏，不停地漏······ &ndash;龙应台 《目送》</li>
<li>把小圈子弄好是不够的，你必须发挥力量促进大环境的改变。 &ndash;龙应台 《女子与小人》</li>
<li>能说他在跟五万个人一起欣赏民歌吗？还是说，他的坐着，其实是奔波，他的热闹，其实是孤独，他，和他的政治对手们，所开的车，没有R档，更缺空挡-山路 &ndash;龙应台 《目送》</li>
<li>她们都在爱恋自己的青春 &ndash;龙应台</li>
<li>等待的滋味-多久不曾这样等待一个人了？能够在一个陌生的小镇上等待一辆来自机场的巴士，里头载着自己十七岁的孩子，挺幸福-十七岁 &ndash;龙应台 《目送》</li>
<li>二十岁之前相信的很多东西，后来一件一件变成不相信。 二十岁之前相信的很多东西，有些其实到今天也还相信。 那么，有没有什么，是我二十岁前不相信，现在却信了呢？ 相信与不相信之前，令人沉吟。 &ndash;龙应台 《目送》</li>
<li>民意如果不接受批判又没有自我反省的节制，可以形成可怕的暴力，带来全体的灾难。 &ndash;龙应台 《这个动荡的世界》</li>
<li>幸福就是，平常没空见面的人，一接到你午夜仓皇的电话，什么都不问，人已经出现在你的门口，带来一个手电筒。 &ndash;龙应台</li>
<li>爱不等于喜欢，不等于认识，爱其实是很多不喜欢、不认识、不沟通的借口。因为有爱，所以正常的沟通仿佛可以不必了。爱冻结在经年累月的沉默里，好像藏着一个疼痛的伤口，没有纱布可绑。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>我们要的是敢于面对现实、接受挑战，勇于负责的政府，但是要促成这样的政府，我们更需要有批判能力、有主动精神、有理性的人民。归根究底，实在是一句老生常谈：几流的人民就配几流的政府。 &ndash;龙应台 《野火集》</li>
<li>世上六十亿人里，没有追求幸福的权利的，可能居大多数。 &ndash;龙应台 《目送》</li>
<li>德国像一个彻夜失眠，夜夜失眠的老人，在黑暗中睁大着眼睛无尽止的反省自己，审判自己，捶打自己，和醒着的灵魂做永无止尽的辩论。一个患失眠症的民族！ &ndash;龙应台 《百年思索》</li>
<li>真正能看懂这世界的，难道竟是那机器，不是你自己的眼睛、你自己的心？ &ndash;龙应台 《目送》</li>
<li>这家书店只卖两种书：社会主义思想和女性主义。我的手指在寻找答案，谁能告诉我做[母亲]和做[个人]之间怎么平衡？我爱极了做母亲，只要把孩子的头放在我胸口，就能使我觉得幸福。可是我也是个需要极大的内在空间的个人，像一匹野狼，不能没有它空旷的野地和清冷的月光。女性主义者，如果你不曾体验过生养的喜悦和痛苦，你究竟能告诉我些什么呢？ &ndash;龙应台 《孩子你慢慢来》</li>
<li>我是个浪迹天涯的人，但是深切地知道，即使穿着凉鞋的脚踏在土耳其的石板路上，别人问“客从哪里来”时，我只有一个答案：不是湖南，不是纽约，不是慕尼黑。家，可以暂时挥别，可以离弃，可以忘怀，但家，永远还是那么一个。四十年后的台湾，有想走而走不掉的人，有可以走而不走的人，也有一心一意在这今生今世的人。不管哪一种，只要他把这里当“家”，&ndash;心甘情愿的也罢，迫不得已也罢&ndash;只要他把这里当家，这个地方就会受到关爱、耕耘、培养。 &ndash;龙应台 《野火集》</li>
<li>幸福就是，寻常人儿依旧。在晚餐的灯下，一样的人坐在一样的位子上，讲一样的话题。年少的仍旧叽叽喳喳谈自己的学校，年老的仍旧唠唠叨叨谈自己的假牙。厨房里一样传来煎鱼的香味，客厅里一样响着聒噪的电视新闻。 &ndash;龙应台</li>
<li>在一个西方的家庭里就比较简单。孩子的母亲有最大的权利，任何人都得尊重”生母”的权利。我的婆婆很清楚地认知：宝宝首先是我的儿子，其次才是她的孙子。对孩子的教养，她可以从旁帮忙，或是提供过来人的经验，甚至于表示不同的意见，但她最后一句话永远是：”当然，决定还是在于你做妈妈的。” &ndash;龙应台 《孩子你慢慢来》</li>
<li>所谓政府，是为我这个小市民做事的；他凡做一件事，我要用监督的眼光衡量它的效率与成果，做得好，是应该的；做得不好，就得换人。事情做得好，不是我必须涕泪感激的“德政”，是他“分内”的责任。 “政府”，通常是个很吓人的名词。 &ndash;龙应台 《野火集》</li>
<li>九十三岁的眼睛和四岁，竟是同一双眼睛？灵魂里，还是那看《史记》的孩子，深情而忧郁的青年？ &ndash;龙应台 《目送》</li>
<li>大学，是一个人文精神的泉源。 所有的科学、技术、经济或商业管理的发明，都必须以“人”为它的根本关照。离开了人文，一个大学，不是大学，这是技术补习班而已。 &ndash;龙应台 《2005港大毕业生演讲》</li>
<li>幸福，就是早上和你说再见的人下午平安地回来了。 &ndash;龙应台</li>
<li>早上，灿亮的阳光扑进来，他还睡着。我打开窗帘，看窗外那一片平凡而现实的风景。心想，在平凡和现实里，也必有巨大的美的可能吧。 &ndash;龙应台</li>
<li>流行文化经过时间的筛子，泥沙被淘汰，金块被留下，留下的就被叫做经典或古典······ &ndash;龙应台 《亲爱的安德烈》</li>
<li>现在绊倒了，你的修行开始。在你与世隔绝的修行室外，有很多人希望捎给你一句轻柔的话，一个温暖的眼神，一个结实的拥抱，可是修行的路总是孤独的，因为智慧必然来自孤独 &ndash;龙应台</li>
<li>在人生的行旅踽踽前行，一路上和形形色色的人或者牵手终身，或者擦身而过，或者共行一段，或者惊鸿一瞥。大多数的人，像传真纸上的黑墨一样，当时鲜明，后来惘然，墨迹再浓也抵不过时间的消灭。有些人，即使是吉光片羽的交会，却纳入了记忆的盒子。盒子在岁月里尘封，但并不消失。它只是等待，等待你有一天不小心碰倒了盒子，里头的东西，所有你以为早已忘怀了的东西，撒了出来，清清楚楚在眼前，消失的竟然是时间。 &ndash;龙应台 《我的不安》</li>
<li>人对自然、对生命过度地暴虐、亵渎之后，他究竟还有什么依靠呢？如果勇敢领袖们的心里深埋着仇恨和野心的地雷，敏感的阿拉伯芥又救得了几个我们疼爱的孩子呢？ &ndash;龙应台 《目送》</li>
<li>曾经相信过海枯石烂作为永恒不灭的表征，后来知道，原来海其实很容易枯，石，原来很容易烂。雨水，很可能不再来，沧海，不会再成桑田。原来，自己脚下所踩的地球，很容易被毁灭。海枯石烂的永恒，原来不存在。 &ndash;龙应台 《相信不相信》</li>
<li>在我们整个成长的过程里，谁，教过我们怎么去面对痛苦、挫折、失败？它不在我们的家庭教育里，它不在小学、中学、大学的教科书或课程里，它更不在我们的大众传播里。家庭教育、学校教育、社会教育只教我们如何去追求卓越，从砍樱桃的华盛顿、悬梁刺股的孙敬、苏秦到平地起楼的比尔·盖茨，都是成功的典范。即便是谈到失败，目的只是要你绝地反攻，再度追求出人头地，譬如越王勾践的卧薪尝胆，洗雪耻辱，譬如哪个战败的国王看见蜘蛛如何结网，不屈不挠。 &ndash;龙应台 《目送》</li>
<li>爱情能持久多半是因为两人有一种“互利”的基础。 &ndash;龙应台 《目送》</li>
<li>一个爱思考的人行走千里只为追究一个形而上的问题；舆马争饮，座无虚席，只为听一场关于道德的辩论；渡口不以政治人物命名，却纪念两个著书立言的人……什么样的社会才允许这样的事情？那必定是一个认识文明、尊重文明的社会，八百年前的中国。 &ndash;龙应台 《人在欧洲》</li>
<li>理想主义者要有品格，才能不被权力腐化；理想主义者要有能力，才能将理想转化为实践。 &ndash;龙应台 《目送》</li>
<li>【做官的原则】一个健康的社会必须是“官不聊生”。权力越大，责任越大，所以可能辜负的人越多。有权的人要慎重，要谦卑，要随时随地检查自己。文人可以快意恩仇，官员却必须忍辱负重。 &ndash;龙应台</li>
<li>寂寞的感觉，像沙尘暴的漫天黑尘，以鬼魅的速度，细微地渗透地包围过来。 &ndash;龙应台 《目送》</li>
<li>空荡荡的街，只有我，和那生了我的女人。 &ndash;龙应台 《目送》</li>
<li>有一天搭计程车，跳过马路上一个大坑，受惊之余，这个嚼槟榔的司机往窗外狠狠吐了一口痰，骂了一句：“操国民党！” 这个司机完全错了！他可以“操”养工出，可以“操”市政府，但路上一个坑，与国民党这个政党何干？他的咒骂完全不公平。可是，或许有一个可能的解释：他骂党，因为他不知道政府哪一个部门负责哪一桩事，路上有坑的时候，他不知道该找谁负责；换句话说，当他要争权利的时候（譬如行路无坑的权利），他并不知道有什么管道可循。 &ndash;龙应台 《野火集》</li>
<li>人生无常，每一次相聚都可能是最后一次啊！ &ndash;龙应台</li>
<li>文化不过是代代累积沉淀的习惯和信念，渗透在生活的实践中。 &ndash;龙应台 《文化，是什么？》</li>
<li>我知道他爱我，但是，爱，不等于喜欢，爱，不等于认识。爱，其实是很多不喜欢、不认识、不沟通的借口。因为有爱，所以正常的沟通仿佛可以不必了。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>日后的人生旅程，当然还是要漂萍离散──人生哪有恒长的厮守？但是三年的海上旗语，如星辰凝望，如月色满怀，我还奢求什么呢？ &ndash;龙应台 《亲爱的安德烈》</li>
<li>孩子，你是否想过，你今天有自由和幸福，是因为在你之前，有人抗议过、奋斗过、争取过、牺牲过。如果你觉得别人的不幸与你无关，那么有一天不幸发生在你身上时，也没有人会在意。我相信，唯一安全的社会，是一个人人都愿意承担的社会，否则，我们都会在危险中、恐惧中苟活。” &ndash;龙应台</li>
<li>有一个年轻人，在长安的街头，夹在人潮里看热闹。执金吾的车骑盛大壮观，威风凛凛的驶过街市。年轻人暗暗对自己说：“仕官当作执金吾，娶妻当得阴丽华。”人潮里另一个年轻人，他也惊诧于车骑的豪华，暗暗对自己说：“这是剥削阶级，有一天消灭它。”哪一个年轻人对呢？ &ndash;龙应台 《百年思索》</li>
<li>这个社会不知为什么充满了对过去的怀念，对现在又充满了幻灭，往前看去，似乎有没什么新鲜的想象。我们的时代仿佛是个没有标记的时代，连叛逆的题目都找不到。 &ndash;龙应台 《亲爱的安德烈》</li>
<li>写“无边落木萧萧下，的不尽长江滚滚来”的时候杜甫不是在记录时间吗？唱“林花谢了春红，太匆匆”的人不是在记录时间吗？伦勃朗一年一年画自画像，从年少轻狂画到满目苍凉&ndash;他不也是在记录时间吗？ &ndash;龙应台 《时间》</li>
<li>某些人在某一个特定的时机热烈主张某一特定的正义，其中隐藏着深不可测的不正义。 &ndash;龙应台</li>
<li>越往南走，到意大利，文化越倾向于以族群家庭，人情为中心，讲关系，讲感情，越往北走，到北欧，文化越倾向于所谓公民社会，以社群，公益为中心，讲公平，讲纪律。南人认为北人没有感情而呆板，北人则认为南人没有效率而且腐败。 &ndash;龙应台 《百年思索》</li>
<li>任何一个国家的建立，都需要一个“假想敌”来激起自己内部的凝聚力。对欧盟而言，挟其经济军事优势而四出“侵略”张牙舞爪而又绝对“没有文化”的美国正是一个理想的“暴秦”，可以促进欧盟各国的团结。 &ndash;龙应台 《百年思索》</li>
<li>我相信，如果你会看见敌人的伤口，你就不会拿起枪来对着他。 &ndash;龙应台 《谁欠了她们的人生》</li>
<li>我们自己心里的痛苦不会因为这个世界有更大或者更“值得”的痛苦而变得微不足道；它对别人也许微不足道，对我们自己，每一次痛苦都是绝对的，真实的，很重大，很痛。 &ndash;龙应台</li>
<li>他的坐着，其实是奔波，他的热闹，其实是孤独，他，和他的政治对少们，所开的车，没有”R”挡，更缺空挡。 &ndash;龙应台 《目送》</li>
<li>要渺小的个人负起责任是不公平的，个人只是”制度”这巨大机器中一个看都看不见的螺丝钉，机器在制造杀人的武器还是救人的工具，不是螺丝钉的责任。 &ndash;龙应台 《人在欧洲》</li>
<li>奢侈，到底是一种被物质撑得过饱的漠视，还是把一切都看的都理所当然的无聊？ &ndash;龙应台 《目送》</li>
<li>一路上，两个人都很忙碌。是这样的，妈妈必须做导游，给安安介绍这个世界，安安是新来的。而妈妈漏掉的东西，安安得指出来，提醒他。 &ndash;龙应台 《孩子你慢慢来》</li>
<li>华安爸爸说，很骄傲地，”别忘记，我是世界上第一个抱他的人。”能够这样见证宇宙的蕴吐，能够这样拥抱鲜活的生命，是多厚的恩泽啊！却有男人推拒这样的特权。 &ndash;龙应台 《孩子你慢慢来》</li>
<li>一个刽子手的责任，在看准了头颈的分寸，一刀霍下，让鲜血喷起，人头落地。被杀的人究竟有罪或者冤枉，不是刽子手的事情。甚至于即使他明明知道眼前跪着的人其实无辜，也没有人会指责刽子手为凶手。我们可以说，刽子手只是奉命行事，做一天和尚当然就得撞一天钟。应该负责的，是判官；或者，是那个不健全的审判制度；再抽象一点，我们不妨这么说，错在那个封建的社会。 &ndash;龙应台 《人在欧洲》</li>
<li>然而，洞悉是非真伪的智慧，独善其身的果敢&ndash;究竟多少圆颅方趾的人有这两样条件？明辨真伪往往不只是智慧的问题；一个智慧极高的人可能生长在一个极权制度中，资讯受到封锁，教育受到歪曲与控制，神话、谎言作为洗脑的材料，从生到死他根本没有洞悉真伪的机会。透过统一编制的教科书、控制严格的报纸与电视、宣传标语、威吓利诱的手段，一个政府可以塑造人民的思想，像搓泥人一样，玩于股掌之间。 &ndash;龙应台 《人在欧洲》<p class='post-footer'>
          显示信息
          <a href='http://untitled-life.github.io/blog/2018/11/26/hello-life/'><a href="http://untitled-life.github.io/blog/2018/11/26/hello-life/">http://untitled-life.github.io/blog/2018/11/26/hello-life/</a></a><br/>
          written by <a href='http://untitled-life.github.io'>Mike Cao</a>
          &nbsp;posted at <a href='http://untitled-life.github.io'><a href="http://untitled-life.github.io">http://untitled-life.github.io</a></a>
          </p></li>
</ul>

]]></content>
  </entry>
  
</feed>
